{"componentChunkName":"component---src-templates-post-js","path":"/blog/activerecord-json-mysql-mariadb/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">When using a relational database, it can be convenient to occasionally store some data as JSON in a table column. As of <a href=\"https://dev.mysql.com/doc/refman/5.7/en/json.html\" class=\"markdown-link\">MySQL 5.7.8</a>, the JSON column type is supported. It's also supported in <a href=\"https://mariadb.org/documentation/\" class=\"markdown-link\">MariaDB</a>. In theory, MySQL and MariaDB are 100% compatible, but it turns out, there's an important difference to be aware of when using the JSON column type in a Rails project with ActiveRecord.</p>\n<h2 class=\"markdown-subtitle\" id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h2>\n<p class=\"markdown-para\">The Rails project I'm working on has developers using MySQL on their laptops. As part of a <a href=\"../nomad-tips-and-tricks\" class=\"markdown-link\">platform migration</a>, the database in all deployed environments was changed to MariaDB. There are a number of <a href=\"https://mariadb.com/resources/blog/why-should-you-migrate-from-mysql-to-mariadb/\" class=\"markdown-link\">benefits</a> to running MariaDB in production over MySQL. Given that it's fully compatible with MySQL, there didn't seem to be any need to change the local environment so our laptops remain using MySQL. That is, until I ran into a surprise dealing with a JSON column.</p>\n<h2 class=\"markdown-subtitle\" id=\"json-column\" style=\"position:relative;\"><a href=\"#json-column\" aria-label=\"json column permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON Column</h2>\n<p class=\"markdown-para\">Here's a migration that creates a table with a JSON column type. Just for an example, imagine we want to store a list of the user's favorite fruits as a JSON array in the <code>users</code> table:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">CreateUsers</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtki mtku\">ActiveRecord::Migration</span><span class=\"mtk1\">[</span><span class=\"mtk4\">6.1</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">change</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    create_table </span><span class=\"mtk4\">:users</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span><span class=\"mtk1\"> |t|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      t.string </span><span class=\"mtk4\">:username</span><span class=\"mtk1\">, </span><span class=\"mtk4\">null:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      t.json </span><span class=\"mtk4\">:fav_fruits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      t.timestamps</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">We can also validate that only arrays will be stored in the <code>fav_fruits</code> column with JSON schema as follows:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"json\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// app/models/user/fav_fruits_schema.json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;type&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;array&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;title&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;The root schema&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;default&quot;</span><span class=\"mtk1\">: [],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;examples&quot;</span><span class=\"mtk1\">: [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;additionalItems&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk4\">true</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;items&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;$id&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;#/items&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;anyOf&quot;</span><span class=\"mtk1\">: [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;$id&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;#/items/anyOf/0&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;type&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;integer&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;title&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;The first anyOf schema&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;default&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk4\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;examples&quot;</span><span class=\"mtk1\">: [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk4\">1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk4\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">And use it in the User model with a custom validate method:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">User</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtki mtku\">ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  validate </span><span class=\"mtk4\">:validate_fav_fruits_against_json_schema</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">validate_fav_fruits_against_json_schema</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @schema </span><span class=\"mtk7\">||=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">File</span><span class=\"mtk1\">.read(</span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.root.join(</span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.root, </span><span class=\"mtk6\">&quot;app&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;models&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;user&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;fav_fruits_schema.json&quot;</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fav_fruits_errors </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">JSON</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Validator</span><span class=\"mtk1\">.fully_validate(@schema, fav_fruits, </span><span class=\"mtk4\">strict:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">, </span><span class=\"mtk4\">validate_schema:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fav_fruits_errors.each </span><span class=\"mtk7\">do</span><span class=\"mtk1\"> |error|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      errors.add(</span><span class=\"mtk4\">:fav_fruits</span><span class=\"mtk1\">, error)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h2>\n<p class=\"markdown-para\">Consider the code below that seeds a user with some data, then iterates over each of their favorite fruits:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">User</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">username:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;alice&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">fav_fruits:</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;apple&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;orange&quot;</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user.fav_fruits.each </span><span class=\"mtk7\">do</span><span class=\"mtk1\"> |fruit|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">puts</span><span class=\"mtk1\"> fruit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># process fruit...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">When this code is run in a Rails project using MySQL, the code behaves as expected, outputting:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">apple</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">orange</span></span></code></pre>\n<p class=\"markdown-para\">But when the same code runs in a deployed environment that is using MariaDB, an error results:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">undefined method `each&#39; for &quot;[\\&quot;apple\\&quot;, \\&quot;orange\\&quot;]&quot;:String (NoMethodError)</span></span></code></pre>\n<p class=\"markdown-para\">If you would like to see the problem in action, clone this <a href=\"https://github.com/danielabar/maria\" class=\"markdown-link\">demo repo</a>, which runs a Rails 7 project using a MariaDB instance running in a Docker container, and try out the steps to reproduce.</p>\n<h2 class=\"markdown-subtitle\" id=\"table-contents\" style=\"position:relative;\"><a href=\"#table-contents\" aria-label=\"table contents permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table Contents</h2>\n<p class=\"markdown-para\">It looks like the problem is that in MariaDB, despite having defined the column as JSON, and having inserted an array, the value that got stored in the database is a String. We can see this by invoking the <code>class</code> method of the <code>fav_fruits</code> attribute in a project using MySQL, and then in a project using MariaDB:</p>\n<p class=\"markdown-para\">First, MySQL:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user.fav_fruits.class</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Array</span></span></span></code></pre>\n<p class=\"markdown-para\">Then MariaDB:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user.fav_fruits.class</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># String</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"table-schema\" style=\"position:relative;\"><a href=\"#table-schema\" aria-label=\"table schema permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table Schema</h2>\n<p class=\"markdown-para\">Looking at the schema that Rails generated when the migration was run confirms the <code>fav_fruits</code> column is indeed json:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"sql\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">-- db/structure.sql</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">CREATE</span><span class=\"mtk1\"> </span><span class=\"mtk7\">TABLE</span><span class=\"mtk1\"> </span><span class=\"mtk6\">`users`</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk6\">`id`</span><span class=\"mtk1\"> </span><span class=\"mtk7\">bigint</span><span class=\"mtk1\">(</span><span class=\"mtk4\">20</span><span class=\"mtk1\">) </span><span class=\"mtk7\">NOT</span><span class=\"mtk1\"> </span><span class=\"mtk7\">NULL</span><span class=\"mtk1\"> AUTO_INCREMENT,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk6\">`username`</span><span class=\"mtk1\"> </span><span class=\"mtk7\">varchar</span><span class=\"mtk1\">(</span><span class=\"mtk4\">255</span><span class=\"mtk1\">) </span><span class=\"mtk7\">NOT</span><span class=\"mtk1\"> </span><span class=\"mtk7\">NULL</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk6\">`fav_fruits`</span><span class=\"mtk1\"> </span><span class=\"mtk7\">json</span><span class=\"mtk1\"> DEFAULT </span><span class=\"mtk7\">NULL</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nThis project is using the SQL format of the schema dump rather than the default Ruby format. This is useful if you ever need to use raw SQL in a migration to execute something that isn't supported by the migration DSL. See the Rails guide on <a class=\"markdown-link\" href=\"https://guides.rubyonrails.org/active_record_migrations.html#types-of-schema-dumps\">migrations</a> for more details.\n</aside>\n<p class=\"markdown-para\">But how does the schema look within each database? To check this, I'm using <a href=\"https://www.jetbrains.com/datagrip/\" class=\"markdown-link\">DataGrip</a>, which is a licensed tool but you could do the same with a command line tool or any database GUI that has a feature to show a table's schema.</p>\n<p class=\"markdown-para\">Here is the schema from MySQL, focusing only on the <code>fav_fruits</code> column:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"sql\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">create</span><span class=\"mtk1\"> </span><span class=\"mtk7\">table</span><span class=\"mtk1\"> </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> </span><span class=\"mtk7\">not</span><span class=\"mtk1\"> </span><span class=\"mtk7\">exists</span><span class=\"mtk1\"> users</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">fav_fruits </span><span class=\"mtk7\">json</span><span class=\"mtk1\"> </span><span class=\"mtk7\">null</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">-- other columns...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p class=\"markdown-para\">So far so good, this is what we expect. But look at the schema from MariaDB:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"sql\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">create</span><span class=\"mtk1\"> </span><span class=\"mtk7\">or</span><span class=\"mtk1\"> </span><span class=\"mtk9\">replace</span><span class=\"mtk1\"> </span><span class=\"mtk7\">table</span><span class=\"mtk1\"> users</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">fav_fruits longtext collate utf8mb4_bin </span><span class=\"mtk7\">null</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">-- other columns...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">constraint</span><span class=\"mtk1\"> fav_fruits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">check</span><span class=\"mtk1\"> (json_valid(</span><span class=\"mtk6\">`fav_fruits`</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p class=\"markdown-para\">With MariaDB, the <code>fav_fruits</code> column is not defined as json, rather it's defined as <code>longtext</code> with a check constraint to ensure that only valid json can be stored. This explains why a String is returned from ActiveRecord <code>user.fav_fruits</code>.</p>\n<p class=\"markdown-para\">According to the MariaDB docs for the <a href=\"https://mariadb.com/kb/en/json-data-type/\" class=\"markdown-link\">JSON Data Type</a>, this is a feature, not a bug:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">JSON is an alias for LONGTEXT introduced for compatibility reasons with MySQL's JSON data type. MariaDB implements this as a LONGTEXT rather, as the JSON data type contradicts the SQL standard... In order to ensure that a valid json document is inserted, the JSON_VALID function can be used as a CHECK constraint. This constraint is automatically included for types using the JSON alias from MariaDB 10.4.3.</p>\n</blockquote>\n<h2 class=\"markdown-subtitle\" id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p class=\"markdown-para\">In the short term, we have a situation where developer's laptops are using MySQL which will return an Array from the JSON column (given that we're only inserting array values and an appropriate JSON validator is in place). But when the same code runs in production against a MariaDB database, a String is returned.</p>\n<p class=\"markdown-para\">Without changing any setup, a solution to this is to override the ActiveRecord attribute method for the JSON field <code>fav_fruits</code>, and  use the <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute\" class=\"markdown-link\">read_attribute</a> method from the <code>ActiveRecord::AttributeMethods::Read</code> module to retrieve the value, and convert as needed.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">User</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtki mtku\">ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">fav_fruits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Retrieve the typecast value of fav_fruits from the database, which could be:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">#   1. nil</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">#   2. String</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">#   3. Array</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    days </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> read_attribute(</span><span class=\"mtk4\">:fav_fruits</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 1. Not allowed to have default not null value on json column, return empty array in this case.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> [] </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> days.blank?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 2. MariaDB: If a String is found, convert to JSON.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">JSON</span><span class=\"mtk1\">.parse(days) </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> days.is_a?(String)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 3. MySQL: Otherwise, return the original value.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    days</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Now, anywhere in the code that <code>user.fav_fruits</code> is used, it's guaranteed to always return an Array, whether the underlying database is MySQL or MariaDB.</p>\n<p class=\"markdown-para\">In the long term, a better approach is to update the local setup to use MariaDB instead of MySQL. This will avoid any future surprises of differences in implementation. With this in place, the solution is to modify the model to use ActiveRecord's <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize\" class=\"markdown-link\">serialize</a> class method. This tells Rails that you want this column retrieved from the database as JSON:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">User</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtki mtku\">ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  serialize </span><span class=\"mtk4\">:fav_fruits</span><span class=\"mtk1\">, JSON</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">With this change in place, we can again run a Rails console in the project that's using MariaDB and check the value of fav_fruits, this time its retrieved from the database as an Array rather than a String:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">u </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">User</span><span class=\"mtk1\">.find_by(</span><span class=\"mtk4\">username:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;alice&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">u.fav_fruits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># =&gt; [&quot;apple&quot;, &quot;orange&quot;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">u.fav_fruits.class</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># =&gt; Array</span></span></span></code></pre>\n<p class=\"markdown-para\">Overriding the <code>fav_fruits</code> method is no longer needed, unless you want to maintain the behaviour of having an empty array returned instead of nil, in which case, the User model would look like this:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">User</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtki mtku\">ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># solution to guarantee JSON when retrieving fav_fruits from MariaDB</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  serialize </span><span class=\"mtk4\">:fav_fruits</span><span class=\"mtk1\">, JSON</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># if want [] returned instead of nil</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">fav_fruits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    days </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> read_attribute(</span><span class=\"mtk4\">:fav_fruits</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> [] </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> days.blank?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">super</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\"><strong class=\"markdown-strong\">WARNING:</strong> Do not use the <code>serialize</code> class method when running against a database that natively supports JSON such as MySQL or Postgres. Otherwise the following error will result when inserting data:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">User</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">username:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;alice&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">fav_fruits:</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;apple&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;orange&quot;</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># activerecord-7.0.4/lib/active_record/attribute_methods/serialization.rb:117:in `block in serialize&#39;:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Column `fav_fruits` of type ActiveRecord::Type::Json does not support `serialize` feature.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># (ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Usually it means that you are trying to use `serialize`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># on a column that already implements serialization natively.</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">This post has covered an important difference in JSON handling between MySQL and MariaDB. It showed a solution if both databases must be supported and another solution if all environments can be modified to use MariaDB. In general, it's better to have the local development environment mirror production as closely as possible to avoid surprising differences in behaviour.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk12 { color: #CFCFC2; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":6,"tableOfContents":"<ul>\n<li><a href=\"#background\">Background</a></li>\n<li><a href=\"#json-column\">JSON Column</a></li>\n<li><a href=\"#the-problem\">The Problem</a></li>\n<li><a href=\"#table-contents\">Table Contents</a></li>\n<li><a href=\"#table-schema\">Table Schema</a></li>\n<li><a href=\"#solution\">Solution</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"ActiveRecord JSON Column with MySQL and MariaDB","date":"01 Apr 2023","description":"An important difference between MySQL and MariaDB when dealing with a JSON column type.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8f8f8","images":{"fallback":{"src":"/static/15ee4b0f646465637977f3a98b6d6b27/f0f43/mariadb-mysql-json.jpg","srcSet":"/static/15ee4b0f646465637977f3a98b6d6b27/04cb0/mariadb-mysql-json.jpg 225w,\n/static/15ee4b0f646465637977f3a98b6d6b27/c967e/mariadb-mysql-json.jpg 450w,\n/static/15ee4b0f646465637977f3a98b6d6b27/f0f43/mariadb-mysql-json.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/15ee4b0f646465637977f3a98b6d6b27/60a08/mariadb-mysql-json.webp 225w,\n/static/15ee4b0f646465637977f3a98b6d6b27/f62a8/mariadb-mysql-json.webp 450w,\n/static/15ee4b0f646465637977f3a98b6d6b27/3e0bb/mariadb-mysql-json.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":456}}}},"fields":{"slug":"/blog/activerecord-json-mysql-mariadb/"}},"relatedP":{"edges":[{"node":{"id":"50a20a25-7223-5e5b-b818-72c4b9799868","frontmatter":{"title":"Maximize Learning from Screencasts","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#d8c8b8","images":{"fallback":{"src":"/static/0e3a7c79c69654f0a6a1fdf3c6f998c9/26528/active-learning-deepmind-ZJKE4XVlKIA-unsplash.jpg","srcSet":"/static/0e3a7c79c69654f0a6a1fdf3c6f998c9/26528/active-learning-deepmind-ZJKE4XVlKIA-unsplash.jpg 300w,\n/static/0e3a7c79c69654f0a6a1fdf3c6f998c9/43429/active-learning-deepmind-ZJKE4XVlKIA-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/0e3a7c79c69654f0a6a1fdf3c6f998c9/5d6c3/active-learning-deepmind-ZJKE4XVlKIA-unsplash.webp 300w,\n/static/0e3a7c79c69654f0a6a1fdf3c6f998c9/68dbc/active-learning-deepmind-ZJKE4XVlKIA-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/learning-from-screencasts/"}}},{"node":{"id":"40da9b16-4faf-592a-b9c0-49d94a2304f9","frontmatter":{"title":"Rails Enums with MySQL or Postgres","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/44e499371e6e83708de5e52b055c6d08/26528/enum-jake-hills-0hgiQQEi4ic-unsplash.jpg","srcSet":"/static/44e499371e6e83708de5e52b055c6d08/26528/enum-jake-hills-0hgiQQEi4ic-unsplash.jpg 300w,\n/static/44e499371e6e83708de5e52b055c6d08/43429/enum-jake-hills-0hgiQQEi4ic-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/44e499371e6e83708de5e52b055c6d08/5d6c3/enum-jake-hills-0hgiQQEi4ic-unsplash.webp 300w,\n/static/44e499371e6e83708de5e52b055c6d08/68dbc/enum-jake-hills-0hgiQQEi4ic-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/rails-enum-mysql-postgres/"}}},{"node":{"id":"0c2e1691-4b14-536c-acee-4d0f120de743","frontmatter":{"title":"Rails Strong Params for GET Request","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/30de304c73a206886f15aeaf89655663/26528/strong-params-sigmund-f0dJjQMhfXo-unsplash.jpg","srcSet":"/static/30de304c73a206886f15aeaf89655663/26528/strong-params-sigmund-f0dJjQMhfXo-unsplash.jpg 300w,\n/static/30de304c73a206886f15aeaf89655663/43429/strong-params-sigmund-f0dJjQMhfXo-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/30de304c73a206886f15aeaf89655663/5d6c3/strong-params-sigmund-f0dJjQMhfXo-unsplash.webp 300w,\n/static/30de304c73a206886f15aeaf89655663/68dbc/strong-params-sigmund-f0dJjQMhfXo-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/rails-strong-params-get/"}}}]}},"pageContext":{"slug":"/blog/activerecord-json-mysql-mariadb/","relatedPosts":["Rails Enums with MySQL or Postgres","Rails Strong Params for GET Request","Maximize Learning from Screencasts"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}