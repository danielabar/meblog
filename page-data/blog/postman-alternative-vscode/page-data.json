{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/postman-alternative-vscode/",
    "result": {"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">If you've been doing web development for any length of time, you've probably built or worked on an HTTP REST style API and needed a REST Client to test it. <a href=\"https://www.postman.com/product/rest-client/\" class=\"markdown-link\">Postman</a> is a very popular choice and I used to reach for this all the time. However, I'd like to share another tool, a VS Code extension that is working better for me, as an alternative to Postman.</p>\n<p class=\"markdown-para\">But first, why not just stick with Postman? Below I've outlined a few pain points that have caused me to seek out an alternative.</p>\n<p class=\"markdown-para\"><strong class=\"markdown-strong\">Disclaimer</strong> This is not at all to suggest that Postman is a bad product. In fact its very good, feature rich, constantly evolving, and certainly solves a lot of problems for a lot of teams and companies. The following is just my perspective using it as a developer.</p>\n<h2 class=\"markdown-subtitle\" id=\"why-not-postman\" style=\"position:relative;\"><a href=\"#why-not-postman\" aria-label=\"why not postman permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why Not Postman?</h2>\n<h3 class=\"markdown-sub-subtitle\" id=\"context-switching\" style=\"position:relative;\"><a href=\"#context-switching\" aria-label=\"context switching permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context Switching</h3>\n<p class=\"markdown-para\">Postman is a separate application that needs to be downloaded and installed, and is separate from the text editor/IDE I use for development (which is VS Code). This requires a context switch, which creates just enough friction to make me a little irritated. It would be nicer to stay in the editor where I can continue to use my preferred keyboard shortcuts, fonts and themes.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"team-sharing\" style=\"position:relative;\"><a href=\"#team-sharing\" aria-label=\"team sharing permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Team Sharing</h3>\n<p class=\"markdown-para\">If you're working by yourself on a project, then the Postman free tier can be sufficient as there's no need to share collections with anyone else. However, if working on a team, it will require being able to share the collection(s) of HTTP requests and environments configuration (dev, qa, staging, prod, etc.) to test your API. This requires a paid Teams account on Postman. If this is an internal API or something proprietary being built for a client, this means trusting a 3rd party (Postman, the company) with the API, and environment information.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"backups\" style=\"position:relative;\"><a href=\"#backups\" aria-label=\"backups permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backups</h3>\n<p class=\"markdown-para\">As you add more and more requests/collections/environments for your API, you will come to depend on Postman and would lose a lot of work if the data were lost. When working on the free tier, collections and environments can be saved to an external json file with the Export feature, but that requires manual work. Or Postman encourages account creation, and then your collections and environments are backed up and synced on their servers. While this is certainly convenient, it does raise the 3rd party trust issue as mentioned earlier.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"secrets-management\" style=\"position:relative;\"><a href=\"#secrets-management\" aria-label=\"secrets management permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Secrets Management</h3>\n<p class=\"markdown-para\">Speaking of trust, many APIs require authentication such as a username/password or token provided on each request. When using Postman, this gets saved as part of the request (or environment if using variables). For a personal side project, this may not be a big deal. But when working on a company project, this effectively makes Postman a secrets manager, especially if storing tokens for staging and production, or other environments that may be publicly accessible. This may not be desirable, especially if the company you're working for already has an approved secrets manager such as LastPass, 1Password, or Vault.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"version-control\" style=\"position:relative;\"><a href=\"#version-control\" aria-label=\"version control permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version Control</h3>\n<p class=\"markdown-para\">Another thing I find irritating about working with Postman is lack of version control, at least, on the free tier.  The API requests will evolve as the project evolves. If you have to go back to a previous point in time to fix a bug or track down where a regression occurred in the project, it's impossible to \"git checkout ...\" the Postman collection at the same git commit hash. Note that the paid teams account does support version control, which I haven't used. From the <a href=\"https://learning.postman.com/docs/collaborating-in-postman/version-control-for-collections/\" class=\"markdown-link\">docs</a> it looks like a proprietary system based roughly on Github PRs, accessible via the Postman GUI. But this is not the same as the git you'd be using for version control on the project.</p>\n<h2 class=\"markdown-subtitle\" id=\"vs-code-rest-client\" style=\"position:relative;\"><a href=\"#vs-code-rest-client\" aria-label=\"vs code rest client permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VS Code REST Client</h2>\n<p class=\"markdown-para\">So what to use instead? I've been using this VS Code <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\" class=\"markdown-link\">REST Client</a> extension for nearly a year and am very happy with it, as it solves all the pain points I've had with Postman. Here a quick introduction to using it.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h3>\n<p class=\"markdown-para\">After installing the extension, create a new folder somewhere in your project such as <code>requests</code> or <code>http</code> (doesn't matter what you call it, it's just for organization to have a single place for all the \"collections\").</p>\n<p class=\"markdown-para\">Now create a file in the folder and give it an <code>.http</code> extension. For example, I'm going to be testing the subscriptions endpoint on my project so will create a file <code>http/subscription.http</code>. Think of this as a Collection in Postman as it supports multiple requests.</p>\n<p class=\"markdown-para\">To add the first request, edit the file as follows. If following along with your project's API, replace with appropriate endpoint:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"http\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Get all subscriptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">GET</span><span class=\"mtk1\"> http://localhost:4000/api/v1/subscriptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Accept:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">application/vnd.api+json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Myapp-Tenant-Api-Key:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">thekey</span></span></span></code></pre>\n<p class=\"markdown-para\">Comments can be added by starting a line with <code>#</code>.</p>\n<p class=\"markdown-para\">The request is specified with any of the usual HTTP verbs, followed by the resource endpoint.</p>\n<p class=\"markdown-para\">Then following an empty line, the request headers are specified in <code>key: value</code> format. In this case, the request is accepting a json response, and also specifies a custom headers specific to this application for the api key.</p>\n<p class=\"markdown-para\">To submit the request, either click on the <code>Send Request</code> text that will appear right above the request line (this is added by the extension), or use keyboard shortcut <kbd class=\"markdown-kbd\">Cmd</kbd> + <kbd class=\"markdown-kbd\">Opt</kbd> + <kbd class=\"markdown-kbd\">R</kbd>.</p>\n<p class=\"markdown-para\">This will open a new editor tab in a side-by-side view displaying the results. The tab title will contain the HTTP response code, the response headers will be listed in the new editor tab, followed by the response body.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"environment-variables\" style=\"position:relative;\"><a href=\"#environment-variables\" aria-label=\"environment variables permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Environment Variables</h3>\n<p class=\"markdown-para\">A few problems may jump out from the simple example above. Firstly the URL is hard-coded to <code>localhost</code>, which makes this less flexible to test other environments. Second issue is secret api key is hard-coded in the file. This is just a regular file in your project that will be committed to version control so secrets should not be a part of that.</p>\n<p class=\"markdown-para\">To fix both of these issues, the extension provides environment variables - this is a similar idea to Environments in Postman. The environment variables are specified in a <code>.vscode/settings.json</code> file at the root of the project. The <code>.vscode</code> directory should be git ignored so this is where the secrets will go.</p>\n<p class=\"markdown-para\">First, edit the request in <code>http/subscriptions.http</code> to indicate that <code>host</code> and <code>apikey</code> should be variable - note the double curly brace syntax for variables:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"http\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Get all subscriptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">GET</span><span class=\"mtk1\"> {{host}}/api/v1/subscriptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Accept:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">application/vnd.api+json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Myapp-Tenant-Api-Key:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{{apikey}}</span></span></span></code></pre>\n<p class=\"markdown-para\">Then configure the variables for each environment you'll be testing against in <code>.vscode/settings.json</code>. For example, if your environments are local, dev, and staging:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"json\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;rest-client.environmentVariables&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;$shared&quot;</span><span class=\"mtk1\">: {},</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;local&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;host&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;http://localhost:4000&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;apikey&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;local-api-key&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;dev&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;host&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;http://dev.host&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;apikey&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;dev-api-key&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;staging&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;host&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;http://staging.host&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;apikey&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;staging-api-key&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">The <code>$shared</code> section is for any non-environment specific variables that should be available even when no specific environment is selected.</p>\n<p class=\"markdown-para\">Now at the bottom right of your editor, an environment selector will appear. Click it to select the environment you want to test with, for example <code>local</code>. Or use <kbd class=\"markdown-kbd\">Cmd</kbd> + <kbd class=\"markdown-kbd\">Opt</kbd> + <kbd class=\"markdown-kbd\">E</kbd> to bring up the environment selector.</p>\n<p class=\"markdown-para\">Then back in <code>http/subscriptions.http</code>, you can hover over the variables and it will show you the value for the selected environment. When submitting the request, the values from <code>.vscode/settings.json</code> are filled in for the variables.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"adding-another-request\" style=\"position:relative;\"><a href=\"#adding-another-request\" aria-label=\"adding another request permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding Another Request</h3>\n<p class=\"markdown-para\">You can add as many requests as you like in a single http file. Simply separate them by an empty line and <code>###</code>. For example, to add a POST request to the <code>http/subscriptions.http</code> file, the POST body follows the request headers after an empty line.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"http\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Get all subscriptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">GET</span><span class=\"mtk1\"> {{host}}/api/v1/subscriptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Accept:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">application/vnd.api+json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Myapp-Tenant-Api-Key:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{{apikey}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">###</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Create a new subscription</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">POST</span><span class=\"mtk1\"> {{host}}/api/v1/subscriptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Accept:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">application/vnd.api+json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Content-Type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">application/vnd.api+json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">Myapp-Tenant-Api-Key:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">{{apikey}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;data&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;type&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;subscriptions&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;attributes&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;status&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;active&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;customer-id&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;some-customer&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">&quot;plan-id&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;some-plan&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">I've barely scratched the surface of all the cool features this extension provides, see the <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\" class=\"markdown-link\">docs</a> for a lot more such as cURL and GraphQL support.</p>\n<h2 class=\"markdown-subtitle\" id=\"why-i-prefer-this\" style=\"position:relative;\"><a href=\"#why-i-prefer-this\" aria-label=\"why i prefer this permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why I Prefer This</h2>\n<h3 class=\"markdown-sub-subtitle\" id=\"editor-integration\" style=\"position:relative;\"><a href=\"#editor-integration\" aria-label=\"editor integration permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editor Integration</h3>\n<p class=\"markdown-para\">Using the http requests does not require leaving the editor. The request files get formatted/styled in your theme of choice, fonts, etc. All the customizations you've made to make your editor perfect for you will also apply to the <code>.http</code> files. You can use the usual shortcut keys to find the http files, intellisense on environment variables when editing the http files, and it even supports finding requests by symbol, just like any other code file in VS Code.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"version-control-backups-sharing\" style=\"position:relative;\"><a href=\"#version-control-backups-sharing\" aria-label=\"version control backups sharing permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version Control, Backups, Sharing</h3>\n<p class=\"markdown-para\">The <code>.http</code> files are part of your project, therefore they live under the same version control as the rest of your code. Now you get all the benefits of git and PR reviews, and the requests are tied to the code they're testing. Of course this also means the request files are backed up just like the rest of your code. This also takes care of the team sharing - all the developers on your team will access any newly added http files or requests as soon as they <code>git fetch</code> or <code>git pull</code>.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"secrets-management-1\" style=\"position:relative;\"><a href=\"#secrets-management-1\" aria-label=\"secrets management 1 permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Secrets Management</h3>\n<p class=\"markdown-para\">API secrets will not get committed as part of the http files as long as they're specified with environment variables. Then the actual values can be stored in the company's approved secrets manager, which developers can use to populate their git ignored settings file.</p>\n<h2 class=\"markdown-subtitle\" id=\"drawbacks\" style=\"position:relative;\"><a href=\"#drawbacks\" aria-label=\"drawbacks permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Drawbacks</h2>\n<p class=\"markdown-para\">One potential issue with using a VS Code extension instead of Postman is that the HTTP requests are not easily accessible to non-techies, or anyone who doesn't have access to the git repo where the request files are stored.</p>\n<p class=\"markdown-para\">The VS Code client also doesn't run tests the way Postman can (see the Tests tab in Postman if you've never used this feature, can write some assertions about the http response in JavaScript). Although, this can be covered by adding API tests as part of the project itself. For example <code>request</code> type tests with RSpec.</p>\n<p class=\"markdown-para\">Finally if not every developer on the team is using VS Code, will have to investigate plugins for other editors that cover similar functionality as VS Code. For example a <a href=\"https://github.com/diepm/vim-rest-console\" class=\"markdown-link\">rest client for vim</a>.</p>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">If everyone on the team that wants to run requests is able to access version control, and setup VS Code (or another editor that supports the http extension), then this is a great solution and alternative to Postman. I've been using it for nearly a year now, both on work and side projects and am very happy with it. I hope you'll give it a try and see some benefits as well.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk12 { color: #CFCFC2; }\n  .monokai .mtk8 { color: #F8F8F0; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":8,"tableOfContents":"<ul>\n<li>\n<p><a href=\"#why-not-postman\">Why Not Postman?</a></p>\n<ul>\n<li><a href=\"#context-switching\">Context Switching</a></li>\n<li><a href=\"#team-sharing\">Team Sharing</a></li>\n<li><a href=\"#backups\">Backups</a></li>\n<li><a href=\"#secrets-management\">Secrets Management</a></li>\n<li><a href=\"#version-control\">Version Control</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#vs-code-rest-client\">VS Code REST Client</a></p>\n<ul>\n<li><a href=\"#getting-started\">Getting Started</a></li>\n<li><a href=\"#environment-variables\">Environment Variables</a></li>\n<li><a href=\"#adding-another-request\">Adding Another Request</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#why-i-prefer-this\">Why I Prefer This</a></p>\n<ul>\n<li><a href=\"#editor-integration\">Editor Integration</a></li>\n<li><a href=\"#version-control-backups-sharing\">Version Control, Backups, Sharing</a></li>\n<li><a href=\"#secrets-management-1\">Secrets Management</a></li>\n</ul>\n</li>\n<li><a href=\"#drawbacks\">Drawbacks</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"A VS Code Alternative to Postman","date":"13 Jun 2021","description":"Looking for a Postman alternative? This VS Code REST Client extension could be the answer.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8c8b8","images":{"fallback":{"src":"/static/d0406fcdb0150724906ee53f75ac1568/84f37/rest-aaron-burden-2bg1jPty490-unsplash.jpg","srcSet":"/static/d0406fcdb0150724906ee53f75ac1568/3e483/rest-aaron-burden-2bg1jPty490-unsplash.jpg 225w,\n/static/d0406fcdb0150724906ee53f75ac1568/737e3/rest-aaron-burden-2bg1jPty490-unsplash.jpg 450w,\n/static/d0406fcdb0150724906ee53f75ac1568/84f37/rest-aaron-burden-2bg1jPty490-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/d0406fcdb0150724906ee53f75ac1568/a8deb/rest-aaron-burden-2bg1jPty490-unsplash.webp 225w,\n/static/d0406fcdb0150724906ee53f75ac1568/a53d9/rest-aaron-burden-2bg1jPty490-unsplash.webp 450w,\n/static/d0406fcdb0150724906ee53f75ac1568/97902/rest-aaron-burden-2bg1jPty490-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":733.0000000000001}}}},"fields":{"slug":"/blog/postman-alternative-vscode/"}},"relatedP":{"edges":[{"node":{"id":"83dd782c-aa3e-591e-84a7-c6aeaa087bb8","frontmatter":{"title":"Build and Publish a Presentation with RevealJS and Github","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#580818","images":{"fallback":{"src":"/static/c2cb416522ba1d8d60f3013c685215ab/26528/presentation.jpg","srcSet":"/static/c2cb416522ba1d8d60f3013c685215ab/26528/presentation.jpg 300w,\n/static/c2cb416522ba1d8d60f3013c685215ab/43429/presentation.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/c2cb416522ba1d8d60f3013c685215ab/5d6c3/presentation.webp 300w,\n/static/c2cb416522ba1d8d60f3013c685215ab/68dbc/presentation.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/build-and-publish-presentation-with-html-and-css/"}}},{"node":{"id":"cdcf1356-3dc9-59e5-9c39-f444dfaa1e23","frontmatter":{"title":"Off with the Digital Distractions!","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/182a854340d01572774f01af50f1bdb5/26528/distraction-charlz-gutierrez-de-pineres-2w_U2-Ah57E-unsplash.jpg","srcSet":"/static/182a854340d01572774f01af50f1bdb5/26528/distraction-charlz-gutierrez-de-pineres-2w_U2-Ah57E-unsplash.jpg 300w,\n/static/182a854340d01572774f01af50f1bdb5/43429/distraction-charlz-gutierrez-de-pineres-2w_U2-Ah57E-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/182a854340d01572774f01af50f1bdb5/5d6c3/distraction-charlz-gutierrez-de-pineres-2w_U2-Ah57E-unsplash.webp 300w,\n/static/182a854340d01572774f01af50f1bdb5/68dbc/distraction-charlz-gutierrez-de-pineres-2w_U2-Ah57E-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/off-with-the-digital-distractions/"}}},{"node":{"id":"48fb7613-1077-57ba-8588-e26dc60bb6c3","frontmatter":{"title":"VS Code Shell Integration","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/e5c5d33f8580d2e684230c1766a564be/26528/vscode-shell-integration-michael-dziedzic-qDG7XKJLKbs-unsplash.jpg","srcSet":"/static/e5c5d33f8580d2e684230c1766a564be/26528/vscode-shell-integration-michael-dziedzic-qDG7XKJLKbs-unsplash.jpg 300w,\n/static/e5c5d33f8580d2e684230c1766a564be/43429/vscode-shell-integration-michael-dziedzic-qDG7XKJLKbs-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/e5c5d33f8580d2e684230c1766a564be/5d6c3/vscode-shell-integration-michael-dziedzic-qDG7XKJLKbs-unsplash.webp 300w,\n/static/e5c5d33f8580d2e684230c1766a564be/68dbc/vscode-shell-integration-michael-dziedzic-qDG7XKJLKbs-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/vscode-shell-integration/"}}}]}},"pageContext":{"slug":"/blog/postman-alternative-vscode/","relatedPosts":["VS Code Shell Integration","Off with the Digital Distractions!","Build and Publish a Presentation with RevealJS and Github"]}},
    "staticQueryHashes": ["163244226"]}