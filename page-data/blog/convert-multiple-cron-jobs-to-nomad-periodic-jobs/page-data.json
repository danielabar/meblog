{"componentChunkName":"component---src-templates-post-js","path":"/blog/convert-multiple-cron-jobs-to-nomad-periodic-jobs/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">Laziness is usually considered a negative or insulting term, but when it comes to software engineering, this can be a valuable attribute. This post will walk through a problem I was facing in converting multiple cron jobs from a legacy platform to a new one, and how being lazy saved manual effort and made future maintenance easier.</p>\n<p class=\"markdown-para\">The application I'm working on has a custom build and deploy pipeline based on <a href=\"https://en.wikipedia.org/wiki/Xen\" class=\"markdown-link\">xen</a> and some home grown promotion tools. Our team is working on switching to a more modern workflow including building out a private cloud with Openstack, the Hashicorp stack for infrastructure as code (including Terraform, Nomad, Vault, and Consul), and Github Actions for CI/CD automation.</p>\n<aside class=\"markdown-aside\">\nThe remainder of this post assumes some familiarity with Hashicorp's Nomad. If you haven't used it before, checkout this excellent <a class=\"markdown-link\" href=\"https://adri-v.medium.com/just-in-time-nomad-80f57cd403ca\">primer</a> and <a class=\"markdown-link\" href=\"https://adri-v.medium.com/just-in-time-nomad-running-traefik-on-hashiqube-7d6dfd8ef9d8\">tutorial</a>.\n</aside>\n<p class=\"markdown-para\">As part of this migration, 30+ cron jobs from the old xen based build had to be converted to run on Nomad. Nomad has a <a href=\"https://www.nomadproject.io/docs/job-specification/periodic\" class=\"markdown-link\">periodic</a> stanza that is designed to run a given task on a particular schedule, so this is perfect for running cron jobs. However, the <code>periodic</code> stanza which defines the <code>cron</code> schedule can only be placed at the Nomad <code>job</code> level. This means that each entry in the application's former crontab needs its own <code>.nomad</code> job file. Each resulting <code>.nomad</code> job file would end up looking very similar, the only differences being in the job, group, and task names, the cron schedule, and the command to run.</p>\n<p class=\"markdown-para\">Being a <a href=\"https://medium.com/the-lazy-developer/on-laziness-26d7a9f32066\" class=\"markdown-link\">lazy</a> developer, there was no way I wanted to manually write over 30 nomad files. Not only would the initial work be tedious, but what if they all required a change in the future? Even with global find/replace in files, that would still be too much manual effort. Instead, I decided to write a generator - a bash script to parse the existing crontab (well, a modified version of it which I'll discuss soon) and generate each nomad file from a template file.</p>\n<h2 class=\"markdown-subtitle\" id=\"cron\" style=\"position:relative;\"><a href=\"#cron\" aria-label=\"cron permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cron</h2>\n<p class=\"markdown-para\">To start, let's take a look at the existing crontab. This is for a Rails application so all the jobs are written using rake:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">* * * * * nobody bundle exec rake app:frequent_tasks</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">5,10,15,25,30 * * * * nobody bundle exec rake app:export_widgets</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">0 * * * * nobody bundle exec rake app:cleanup_widgets</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"nomad-example\" style=\"position:relative;\"><a href=\"#nomad-example\" aria-label=\"nomad example permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nomad Example</h2>\n<p class=\"markdown-para\">Now let's look at what the first job would look like written as a Nomad file. This project uses the <a href=\"https://github.blog/2020-09-01-introducing-github-container-registry/\" class=\"markdown-link\">Github Container Registry</a> to store its Docker images. The same image is used to run the app with Puma, database migrations, and cron jobs, therefore it intentionally doesn't have a <code>CMD</code> or <code>ENTRYPOINT</code> specified in its <code>Dockerfile</code>, rather, each Nomad task specifies the command to run. This is accomplished by specifying <code>bash</code> as the command to run, then passing an array of arguments with the actual command to run.</p>\n<p class=\"markdown-para\"><code>prohibit_overlap</code> prevents two instances of the same cron jobs from running at the same time, in the case that the first run takes longer and the second instance would have been scheduled to start.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;app_frequent_tasks&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">datacenters</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;dc1&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">periodic</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">cron</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;* * * * *&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">prohibit_overlap</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;frequent_tasks&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;frequent_tasks&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\">   </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;RAILS_ENV=production bundle exec rake app:frequent_tasks&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">resources</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">cpu</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">500</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">256</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">env</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">RAILS_ENV</span><span class=\"mtk7\">=</span><span class=\"mtk1\">production</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">template</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\"># Access secrets from Vault.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\"># Details not relevant for this example.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">Note the use of <code>RAILS_ENV=production</code> in the command args. In theory, this shouldn't be required due to use of the <code>env</code> stanza further below, but in practice, the <code>env</code> stanza did not work for me so I had to specify it in the command args.</p>\n<h2 class=\"markdown-subtitle\" id=\"nomad-template\" style=\"position:relative;\"><a href=\"#nomad-template\" aria-label=\"nomad template permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nomad \"Template\"</h2>\n<p class=\"markdown-para\">To express this in a more general way, the rake task name from the cron entry (eg: <code>frequent_tasks</code>) becomes the job name, pre-pended with app (eg: <code>app_frequent_tasks</code>). The cron schedule (eg: <code>* * * * *</code>) becomes the periodic cron value. The rake task name is also used for the Nomad group and task name, and as the last value in the <code>args</code> for the Docker command configuration in the Nomad file.</p>\n<p class=\"markdown-para\">In order to write a script that will generate these Nomad files for each cron, start with a \"template\" Nomad file that is structured as the above, but with the specific values as strings <code>JOB_NAME</code> and <code>CRON_VALUE</code> that can be replaced. Use of the word template here refers to a file template that the script will use, not the <code>template</code> Nomad stanza used to read values from Vault or Consul:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># template.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;app_JOB_NAME&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">datacenters</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;dc1&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">periodic</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">cron</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;CRON_VALUE&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">prohibit_overlap</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;JOB_NAME&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;JOB_NAME&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\">   </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;RAILS_ENV=production bundle exec rake app:JOB_NAME&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">resources</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">cpu</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">500</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">256</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">env</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">RAILS_ENV</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> production</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">template</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\"># Access secrets from Vault.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\"># Details not relevant for this example.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"generator-script\" style=\"position:relative;\"><a href=\"#generator-script\" aria-label=\"generator script permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator Script</h2>\n<p class=\"markdown-para\">The generator script will have to iterate over each line of the cron, and parse it into the cron value, and job name. I ran into a snag here as there was no natural character to separate on. Couldn't use space or comma since these can also occur within the cron value. This required a one-time manual task of creating a file <code>cron-input</code> to add a pipe character separating the cron schedule from remainder of command. Also removed the <code>nobody</code> user:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">* * * * *|bundle exec rake app:frequent_tasks</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">5,10,15,25,30 * * * *|bundle exec rake app:export_widgets</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">0 * * * *|bundle exec rake app:cleanup_widgets</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span></code></pre>\n<p class=\"markdown-para\">And finally, here is the annotated script to iterate over <code>cron-input</code> and generate the <code>.nomad</code> files:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#!/bin/bash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># This is the pipe separated version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">INPUT_FILE=/path/to/cron-input</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># The &quot;template&quot; nomad file with strings JOB_NAME and CRON_VALUE to be replaced</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">TEMPLATE_FILE=/path/to/template.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Record the original value of Internal File Separator so we can put it back later</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">OIFS=$IFS</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Iterate over each line in input file (aka pipe separated cron)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">while</span><span class=\"mtk1\"> </span><span class=\"mtk9\">read</span><span class=\"mtk1\"> line</span><span class=\"mtk7\">;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Temporarily set Internal File Separator to pipe character for parsing cron input</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  IFS=</span><span class=\"mtk6\">&#39;|&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Parse line of cron-input into cron and command values</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Example, given a line: * * * * *|bundle exec rake app:frequent_tasks</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Then cron_value will be &quot;* * * * *&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># and command_value will be &quot;bundle exec rake app:frequent_tasks&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">read</span><span class=\"mtk1\"> -r cron_value command_value </span><span class=\"mtk7\">&lt;&lt;&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;$line&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Temporarily set Internal File Separate to colon character to parse out the job name</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  IFS=</span><span class=\"mtk6\">&#39;:&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Parse `command_value` from previous step to extract the job name.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Example, given a command_value: bundle exec rake app:frequent_tasks</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Then discard will be &quot;bundle exec rake app&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># and job_name will be &quot;frequent_tasks&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># The first part is not needed so the variable is called `discard`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">read</span><span class=\"mtk1\"> -r discard job_name </span><span class=\"mtk7\">&lt;&lt;&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;$command_value&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Generate nomad file for job from the template file.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Example, if the job_name extracted from previous step was: &quot;frequent_tasks&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># then generate a file named frequent_tasks.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Assumes there is a directory named `generated` to contain all the resulting .nomad files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  cp TEMPLATE_FILE generated/$job_name.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Replace all strings JOB_NAME and CRON_VALUE in generated file with values parsed from cron input file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># On a mac, must provide a bakup extension when editing files in place, on Linux, this can be skipped</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  sed -i </span><span class=\"mtk6\">&#39;.bak&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;s/JOB_NAME/</span><span class=\"mtk1\">$job_name</span><span class=\"mtk6\">/g;s/CRON_VALUE/</span><span class=\"mtk1\">$cron_value</span><span class=\"mtk6\">/&quot;</span><span class=\"mtk1\"> $job_name.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">done</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> $INPUT_FILE</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># remove temporary .bak files from sed (only needed on mac)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">rm generated/</span><span class=\"mtk7\">*</span><span class=\"mtk1\">.bak</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># reset original Internal File Separator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">IFS=$OIFS</span></span></span></code></pre>\n<p class=\"markdown-para\">Running this script will result in a <code>.nomad</code> file being generated for each entry in the <code>cron-input</code> file. For example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└── generated</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ├── frequent_tasks.nomad</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ├── export_widgets.nomad</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ├── cleanup_widgets.nomad</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    └── ...</span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"deploy\" style=\"position:relative;\"><a href=\"#deploy\" aria-label=\"deploy permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy</h2>\n<p class=\"markdown-para\">It's not enough to generate the files, they also need to be deployed to Nomad so that it can start scheduling each periodic job to run based on the specified cron schedule. For just a single file, the command is:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad job run generated/frequent_tasks.nomad</span></span></code></pre>\n<p class=\"markdown-para\">However, since the theme of this post is laziness, I'm not going to enter 30+ commands like the above to submit each job. Instead, the following script can be used to iterate over each nomad file in the generated directory:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#!/bin/bash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Contains generated nomad files from previous step</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">GENERATED_DIR=/path/to/generated</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Iterate over each file in generated directory and submit it to nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> i </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> $GENERATED_DIR/</span><span class=\"mtk7\">*;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  nomad job run $i</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">done</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nIn order to run nomad commands like the above, you must have nomad <a class=\"markdown-link\" href=\"https://www.nomadproject.io/docs/install\">installed</a> and have configured environment variables NOMAD_ADDR, NOMAD_NAMESPACE, AND NOMAD_TOKEN in your profile.\n</aside>\n<p class=\"markdown-para\">This can also be incorporated into a CI/CD workflow. Modify the script slightly to accept arguments for the nomad address, namespace, and token (so that they can be provided by the pipeline) and set them before invoking nomad:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#!/bin/bash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Will be provided by pipeline when invoking this script</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">NOMAD_ADDR=$1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">NOMAD_NAMESPACE=$2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">NOMAD_TOKEN=$3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># This directory should contain all the generated nomad files from previous step</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">GENERATED_DIR=/path/to/generated</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Iterate over each file in generated directory and submit it to nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> i </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> $GENERATED_DIR/</span><span class=\"mtk7\">*;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  nomad job run $i</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">done</span></span></span></code></pre>\n<p class=\"markdown-para\">Given that this script is named <code>run-nomad-periodic.sh</code>, here's an example of running it in a step as part of a Github Actions based workflow. It assumes that all the Nomad environment variables have been configured as Github repository <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets\" class=\"markdown-link\">secrets</a>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"yml\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># .github/workflows/deploy.yml</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">name</span><span class=\"mtk1\">: </span><span class=\"mtk6\">Deploy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">on</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">workflow_run</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">workflows</span><span class=\"mtk1\">: [</span><span class=\"mtk6\">&quot;CI&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">branches</span><span class=\"mtk1\">: [</span><span class=\"mtk6\">main</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">types</span><span class=\"mtk1\">: [</span><span class=\"mtk6\">completed</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">jobs</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">build_image</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">steps</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># build Docker image for app and push to container registry...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">deploy_prod</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">needs</span><span class=\"mtk1\">: </span><span class=\"mtk6\">build_image</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">env</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">NOMAD_ADDR</span><span class=\"mtk1\">: </span><span class=\"mtk6\">${{ secrets.NOMAD_ADDR }}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">NOMAD_NAMESPACE</span><span class=\"mtk1\">: </span><span class=\"mtk6\">${{ secrets.NOMAD_NAMESPACE }}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">NOMAD_TOKEN</span><span class=\"mtk1\">: </span><span class=\"mtk6\">${{ secrets.NOMAD_TOKEN }}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">steps</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      - </span><span class=\"mtk7\">name</span><span class=\"mtk1\">: </span><span class=\"mtk6\">Nomad Periodic</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">run</span><span class=\"mtk1\">: </span><span class=\"mtk6\">./path/to/run-nomad.periodic.sh $NOMAD_ADDR $NOMAD_NAMESPACE $NOMAD_TOKEN</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nThe workflow_run event is used to trigger a workflow when another workflow has completed. In this case, the Deploy workflow will only run after the CI (Continuous Integration) workflow has completed. See my post on <a class=\"markdown-link\" href=\"https://danielabaron.me/blog/ci-cd-pipeline-for-gatsby/#Continuous-Deployment-When\">CI/CD</a> to learn more about the workflow_run event.\n</aside>\n<h2 class=\"markdown-subtitle\" id=\"maintenance\" style=\"position:relative;\"><a href=\"#maintenance\" aria-label=\"maintenance permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maintenance</h2>\n<p class=\"markdown-para\">Here's where the power of laziness really shines. Suppose a change is needed to the periodic jobs. For example, the data center is being changed. There's no need to use global find/replace to edit the generated files directly. Rather, the <code>nomad.template</code> file can be modified:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># template.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;app_JOB_NAME&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># was dc1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">datacenters</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;dc2&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">periodic</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">cron</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;CRON_VALUE&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">prohibit_overlap</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">Then run the generator script again to regenerate the nomad files, then they can be deployed again with the run script.</p>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">This post has explained why, when faced with a large repetitive task, it's good to embrace your inner laziness and find an automated way to perform this task. Specifically we've covered how to automate generation of Nomad periodic jobs from multiple cron jobs from a legacy platform and how to deploy them via scripts.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk10 { color: #FD971F; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":7,"tableOfContents":"<ul>\n<li><a href=\"#cron\">Cron</a></li>\n<li><a href=\"#nomad-example\">Nomad Example</a></li>\n<li><a href=\"#nomad-template\">Nomad \"Template\"</a></li>\n<li><a href=\"#generator-script\">Generator Script</a></li>\n<li><a href=\"#deploy\">Deploy</a></li>\n<li><a href=\"#maintenance\">Maintenance</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Migrate Cron Jobs to Nomad the Lazy Way","date":"13 Nov 2021","description":"Learn how to use some bash scripting to generate multiple Nomad periodic jobs from a crontab and deploy them.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#585858","images":{"fallback":{"src":"/static/314c220e8d522b3892c0e1a562c28733/fc2d4/lazy-david-clode-BCI9_1eJfO0-unsplash.jpg","srcSet":"/static/314c220e8d522b3892c0e1a562c28733/b834a/lazy-david-clode-BCI9_1eJfO0-unsplash.jpg 225w,\n/static/314c220e8d522b3892c0e1a562c28733/21c52/lazy-david-clode-BCI9_1eJfO0-unsplash.jpg 450w,\n/static/314c220e8d522b3892c0e1a562c28733/fc2d4/lazy-david-clode-BCI9_1eJfO0-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/314c220e8d522b3892c0e1a562c28733/71a10/lazy-david-clode-BCI9_1eJfO0-unsplash.webp 225w,\n/static/314c220e8d522b3892c0e1a562c28733/901f1/lazy-david-clode-BCI9_1eJfO0-unsplash.webp 450w,\n/static/314c220e8d522b3892c0e1a562c28733/4ffff/lazy-david-clode-BCI9_1eJfO0-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":600}}}},"fields":{"slug":"/blog/convert-multiple-cron-jobs-to-nomad-periodic-jobs/"}},"relatedP":{"edges":[{"node":{"id":"d472ffdd-c948-5d9f-b7cc-11a60dd52f15","frontmatter":{"title":"Build a CI/CD Pipeline for a Gatsby Site","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/5de4f1b49800352db508e757b4dbc62c/26528/ci-cd-pipeline-gatsby-ej-strat-VjWi56AWQ9k-unsplash.jpg","srcSet":"/static/5de4f1b49800352db508e757b4dbc62c/26528/ci-cd-pipeline-gatsby-ej-strat-VjWi56AWQ9k-unsplash.jpg 300w,\n/static/5de4f1b49800352db508e757b4dbc62c/43429/ci-cd-pipeline-gatsby-ej-strat-VjWi56AWQ9k-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/5de4f1b49800352db508e757b4dbc62c/5d6c3/ci-cd-pipeline-gatsby-ej-strat-VjWi56AWQ9k-unsplash.webp 300w,\n/static/5de4f1b49800352db508e757b4dbc62c/68dbc/ci-cd-pipeline-gatsby-ej-strat-VjWi56AWQ9k-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/ci-cd-pipeline-for-gatsby/"}}},{"node":{"id":"3e795729-0818-5a18-97e1-fc7e0d67a176","frontmatter":{"title":"Automate Tabs & Commands in iTerm2","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#d8c8b8","images":{"fallback":{"src":"/static/fb78290dc10d789b9a100d0d2c95c04f/26528/automation-2-jan-jakub-nanista-UHyrjKPsshk-unsplash.jpg","srcSet":"/static/fb78290dc10d789b9a100d0d2c95c04f/26528/automation-2-jan-jakub-nanista-UHyrjKPsshk-unsplash.jpg 300w,\n/static/fb78290dc10d789b9a100d0d2c95c04f/43429/automation-2-jan-jakub-nanista-UHyrjKPsshk-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/fb78290dc10d789b9a100d0d2c95c04f/5d6c3/automation-2-jan-jakub-nanista-UHyrjKPsshk-unsplash.webp 300w,\n/static/fb78290dc10d789b9a100d0d2c95c04f/68dbc/automation-2-jan-jakub-nanista-UHyrjKPsshk-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/iterm-automation/"}}},{"node":{"id":"46775b70-43f2-584d-8c65-327ac46ebbd7","frontmatter":{"title":"Dockerize a Rails Application for Development","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#d8c8d8","images":{"fallback":{"src":"/static/3281f20a27a3ba24dcc1ca78c639c25d/26528/docker-rails-shipping-containers.jpg","srcSet":"/static/3281f20a27a3ba24dcc1ca78c639c25d/26528/docker-rails-shipping-containers.jpg 300w,\n/static/3281f20a27a3ba24dcc1ca78c639c25d/43429/docker-rails-shipping-containers.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/3281f20a27a3ba24dcc1ca78c639c25d/5d6c3/docker-rails-shipping-containers.webp 300w,\n/static/3281f20a27a3ba24dcc1ca78c639c25d/68dbc/docker-rails-shipping-containers.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/dockerize-rails-app-for-dev-debug-and-testing/"}}}]}},"pageContext":{"slug":"/blog/convert-multiple-cron-jobs-to-nomad-periodic-jobs/","relatedPosts":["Build a CI/CD Pipeline for a Gatsby Site","Automate Tabs & Commands in iTerm2","Dockerize a Rails Application for Development"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}