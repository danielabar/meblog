{"componentChunkName":"component---src-templates-post-js","path":"/blog/a-tale-of-rails-chatgpt-and-scopes/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">Today I'd like to share a cautionary tale about using ChatGPT to improve some Rails model querying code, and how the Rails Guides and API docs turned out to be a better resource in this case.</p>\n<h2 class=\"markdown-subtitle\" id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h2>\n<p class=\"markdown-para\">I'm working on a Rails application to handle agile retrospective meetings for teams. The Retrospective model has an enum to indicate whether the retrospective is open or closed. There can only be one open retrospective at a time, which is represented with a custom validation rule. Here is the model:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># == Schema Information</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Table name: retrospectives</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#  id         :bigint           not null, primary key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#  status     :enum             default(&quot;open&quot;), not null</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#  title      :string           not null</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#  created_at :datetime         not null</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#  updated_at :datetime         not null</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Indexes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#  index_retrospectives_on_title  (title) UNIQUE</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">Retrospective</span><span class=\"mtk5 mtki mtku\"> &lt; ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  has_many </span><span class=\"mtk4\">:comments</span><span class=\"mtk1\">, </span><span class=\"mtk4\">dependent:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">:destroy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  enum </span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">open:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;open&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">closed:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;closed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  validates </span><span class=\"mtk4\">:title</span><span class=\"mtk1\">, </span><span class=\"mtk4\">presence:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">, </span><span class=\"mtk4\">uniqueness:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  validates </span><span class=\"mtk4\">:status</span><span class=\"mtk1\">, </span><span class=\"mtk4\">presence:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  validate </span><span class=\"mtk4\">:only_one_open_retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">private</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">only_one_open_retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">unless</span><span class=\"mtk1\"> open? </span><span class=\"mtk7\">&amp;&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">exists?</span><span class=\"mtk1\">(</span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;open&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    errors.</span><span class=\"mtk5\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:status</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;There can only be one open retrospective at a time.&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Throughout the application, I frequently need to access the one and only open retrospective. After some time, I noticed this code appeared multiple times throughout the services layer:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">find_by</span><span class=\"mtk1\">(</span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">statuses</span><span class=\"mtk1\">[</span><span class=\"mtk4\">:open</span><span class=\"mtk1\">])</span></span></span></code></pre>\n<p class=\"markdown-para\">In the future, the logic to find the retrospective could change, for example, if the application is enhanced for multi-tenancy. To avoid code duplication, and having the services be dependent on these details of the retrospective model, I decided to refactor by adding a class method <code>find_open</code> on the model:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">Retrospective</span><span class=\"mtk5 mtki mtku\"> &lt; ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  enum </span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">open:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;open&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">closed:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;closed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">self.find_open</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">find_by</span><span class=\"mtk1\">(</span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">statuses</span><span class=\"mtk1\">[</span><span class=\"mtk4\">:open</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Then all the services that need access to the open retrospective can simply call the <code>find_open</code> method on the model class:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># app/services/some_service.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">SomeService</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">call</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    retro </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">find_open</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># do something with retro...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"ask-chatgpt\" style=\"position:relative;\"><a href=\"#ask-chatgpt\" aria-label=\"ask chatgpt permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ask ChatGPT</h2>\n<p class=\"markdown-para\">The <code>find_open</code> model method worked, but I had a feeling there might be a more \"Rails-ey way\" of doing things. So I gave the model code to ChatGPT and asked if there was a more idiomatic Rails solution to deal with the code duplication. ChatGPT said that using Rails scopes would be better for query re-usability. Here's what it came up with:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">Retrospective</span><span class=\"mtk5 mtki mtku\"> &lt; ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  enum </span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">open:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;open&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">closed:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;closed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  scope </span><span class=\"mtk4\">:open_retrospective</span><span class=\"mtk1\">, </span><span class=\"mtk9\">-&gt;</span><span class=\"mtk1\"> { </span><span class=\"mtk5\">find_by</span><span class=\"mtk1\">(</span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> statuses[</span><span class=\"mtk4\">:open</span><span class=\"mtk1\">]) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Looks reasonable? Let's try this out in a Rails console. I started from an empty database:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Create an open retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">retro1 </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">create</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">title:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;My Project Sprint 2&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">statuses</span><span class=\"mtk1\">[</span><span class=\"mtk4\">:open</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Also create a closed retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">retro2 </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">create</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">title:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;My Project Sprint 1&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">statuses</span><span class=\"mtk1\">[</span><span class=\"mtk4\">:closed</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Use the scope suggested by ChatGPT to find the open retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">open_retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># SELECT &quot;retrospectives&quot;.*</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># FROM &quot;retrospectives&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># WHERE &quot;retrospectives&quot;.&quot;status&quot; = $1 LIMIT $2  [[&quot;status&quot;, &quot;open&quot;], [&quot;LIMIT&quot;, 1]]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># &lt;Retrospective:0x00000001140fa018</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   id: 22,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   title: &quot;My Project Sprint 2&quot;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   status: &quot;open&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   created_at: ..., updated_at: ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># &gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result.</span><span class=\"mtk5\">class</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># =&gt; Retrospective(id: integer, title: string, created_at: datetime, updated_at: datetime, status: enum)</span></span></span></code></pre>\n<p class=\"markdown-para\">When the scope is invoked, the Rails console output shows a SQL SELECT running to find retrospectives where the status is <code>open</code>. Then the scope returns the model titled \"My Project Sprint 2\", which is the only open retrospective in the database. So far so good.</p>\n<p class=\"markdown-para\">However, what will the scope return when there are no open retrospectives? I was expecting a <code>nil</code> return, but here's what actually happened:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Close the currently open retrospective with the enum-generated method</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">retro1.</span><span class=\"mtk5\">closed!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Use the scope suggested by ChatGPT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">open_retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># === RUNS THIS QUERY, THE SAME AS BEFORE,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># === BUT IT DOES NOT RETURN ANY RESULTS</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># SELECT &quot;retrospectives&quot;.*</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># FROM &quot;retrospectives&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># WHERE &quot;retrospectives&quot;.&quot;status&quot; = $1 LIMIT $2  [[&quot;status&quot;, &quot;open&quot;], [&quot;LIMIT&quot;, 1]]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># === THEN RUNS ANOTHER QUERY TO FETCH ALL RETROSPECTIVES!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># SELECT &quot;retrospectives&quot;.* FROM &quot;retrospectives&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   &lt;Retrospective:0x00000001140fa018</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     id: 23,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     title: &quot;My Project Sprint 1&quot;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     status: &quot;closed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     created_at: ..., updated_at: ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   &gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   &lt;Retrospective:0x00000001140fa018</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     id: 22,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     title: &quot;My Project Sprint 2&quot;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     status: &quot;closed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     created_at: ..., updated_at: ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   &gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result.</span><span class=\"mtk5\">class</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># =&gt; Retrospective::ActiveRecord_Relation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result.</span><span class=\"mtk5\">size</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># =&gt; 2</span></span></span></code></pre>\n<p class=\"markdown-para\">This time, the results are unexpected. When the scope is invoked, the Rails console output shows its running the same SQL SELECT as before to find an open retrospective. However, in this case, none are found. Then the Rails console output shows that the scope proceeds to run a second query that fetches <em class=\"markdown-emphasis\">all</em> retrospectives from the database, regardless of status.</p>\n<p class=\"markdown-para\">In this case, the return result from the scope is an <a href=\"https://api.rubyonrails.org/v7.1.2/classes/ActiveRecord/Relation.html\" class=\"markdown-link\">ActiveRecord::Relation</a> representing a query that returns <em class=\"markdown-emphasis\">all</em> the retrospectives (there are just 2 in this simple example).</p>\n<p class=\"markdown-para\">Not only was I not getting <code>nil</code> as expected, but this could cause a performance problem as the application grows and there are large numbers of records in the <code>retrospectives</code> table.</p>\n<p class=\"markdown-para\">I explained the situation to ChatGPT and it did that thing where it apologizes, then provides the same solution again that doesn't fix the problem. (I encountered a similar issue awhile back trying to find the syntax for a <a href=\"../gatsby5-distinct-query#ai-to-the-rescue\" class=\"markdown-link\">distinct GraphQL query</a>)</p>\n<h2 class=\"markdown-subtitle\" id=\"ask-the-docs\" style=\"position:relative;\"><a href=\"#ask-the-docs\" aria-label=\"ask the docs permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ask the Docs</h2>\n<p class=\"markdown-para\">When AI doesn't provide the solution, it's good to lean on skills we engineers developed before the existence of such tools. Read the documentation! Industry old-timers may remember this as <a href=\"https://en.wikipedia.org/wiki/RTFM\" class=\"markdown-link\">RTFM</a>.</p>\n<p class=\"markdown-para\">I started with the guide on the <a href=\"https://guides.rubyonrails.org/active_record_querying.html\" class=\"markdown-link\">Active Record Query Interface</a>, more specifically, the section on <a href=\"https://guides.rubyonrails.org/active_record_querying.html#scopes\" class=\"markdown-link\">scopes</a>. Here I found this illuminating description:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">Scoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or models. With these scopes, you can use every method previously covered such as where, joins and includes. All scope bodies should return an ActiveRecord::Relation or nil to allow for further methods (such as other scopes) to be called on it.</p>\n</blockquote>\n<p class=\"markdown-para\">This phrase is key: <strong class=\"markdown-strong\">All scope bodies should return an ActiveRecord::Relation</strong></p>\n<p class=\"markdown-para\">Let's take another look at the scope that ChatGPT generated:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">scope </span><span class=\"mtk4\">:open_retrospective</span><span class=\"mtk1\">, </span><span class=\"mtk9\">-&gt;</span><span class=\"mtk1\"> { </span><span class=\"mtk5\">find_by</span><span class=\"mtk1\">(</span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> statuses[</span><span class=\"mtk4\">:open</span><span class=\"mtk1\">]) }</span></span></span></code></pre>\n<p class=\"markdown-para\">What does the <code>find_by</code> method return? The answer to this can be found in the <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-find_by\" class=\"markdown-link\">Rails API docs for find_by</a>. Quoting the relevant snippet:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">Finds the first record matching the specified conditions... If no record is found, returns nil.</p>\n</blockquote>\n<p class=\"markdown-para\">Aha! So <code>find_by</code> does not return an <code>ActiveRecord::Relation</code>. It returns either the model instance if one is found matching the given conditions, or it returns <code>nil</code>. This starts to explain some of the surprising behaviour encountered earlier with the scope, it's not being given a method that returns a relation.</p>\n<p class=\"markdown-para\">The next part of the mystery is, why did the scope proceed to query for <em class=\"markdown-emphasis\">all</em> model instances, when the finder returned <code>nil</code>? Although the guides explained that the scope should return a relation or <code>nil</code>, it didn't say what happens if <code>nil</code> is returned. The answer to this can be found in the Rails API docs for <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope\" class=\"markdown-link\">scope</a>. Quoting the relevant snippet:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">Adds a class method for retrieving and querying objects... If it returns nil or false, an all scope is returned instead.</p>\n</blockquote>\n<p class=\"markdown-para\">Aha! Another piece of the mystery resolved. If the body of the scope returns <code>nil</code>, which is the behaviour of <code>find_by</code> when no records are found, then the scope will go ahead and return an <code>all</code> scope. What exactly is an <code>all</code> scope? You can probably guess by the name that it will return a relation representing all the records for the model where this scope is defined. To be absolutely sure, let's check the Rails API docs for <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all\" class=\"markdown-link\">all</a>. Here there's only a one sentence description:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">Returns an ActiveRecord::Relation scope object.</p>\n</blockquote>\n<p class=\"markdown-para\">And a code example that demonstrates the behavior of <code>all</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">posts </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Post</span><span class=\"mtk1\">.</span><span class=\"mtk5\">all</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">posts.</span><span class=\"mtk5\">size</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># Fires &quot;select count(*) from  posts&quot; and returns the count</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">posts.</span><span class=\"mtk5\">each</span><span class=\"mtk1\"> {|p| </span><span class=\"mtk9\">puts</span><span class=\"mtk1\"> </span><span class=\"mtk9\">p</span><span class=\"mtk1\">.</span><span class=\"mtk5\">name</span><span class=\"mtk1\"> } </span><span class=\"mtk3\"># Fires &quot;select * from posts&quot; and loads post objects</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p class=\"markdown-para\">Putting together all the information from the Rails guides and API documentation, the scope can be fixed to return an <code>ActiveRecord::Relation</code> by using the <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-where\" class=\"markdown-link\">where</a> method rather than a finder method:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">Retrospective</span><span class=\"mtk5 mtki mtku\"> &lt; ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  enum </span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">open:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;open&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">closed:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;closed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  scope </span><span class=\"mtk4\">:open_retrospective</span><span class=\"mtk1\">, </span><span class=\"mtk9\">-&gt;</span><span class=\"mtk1\"> { </span><span class=\"mtk5\">where</span><span class=\"mtk1\">(</span><span class=\"mtk4\">status:</span><span class=\"mtk1\"> statuses[</span><span class=\"mtk4\">:open</span><span class=\"mtk1\">]) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Trying this version in the Rails console <code>bin/rails c</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Starting from all retrospectives closed:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk9\">select</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:id</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:title</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:status</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   &lt;Retrospective:0xb2fb40 id: 23, title: &quot;My Project Sprint 1&quot;, status: &quot;closed&quot;&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   &lt;Retrospective:0xb2faa0 id: 22, title: &quot;My Project Sprint 2&quot;, status: &quot;closed&quot;&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># This time, using the scope returns an empty relation:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">open_retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># =&gt; []</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result.</span><span class=\"mtk5\">class</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># =&gt; Retrospective::ActiveRecord_Relation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Re-open one of the retrospectives with the enum method</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">find_by</span><span class=\"mtk1\">(</span><span class=\"mtk4\">title:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;My Project Sprint 2&quot;</span><span class=\"mtk1\">).</span><span class=\"mtk5\">open!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Use the scope again, this time it returns a relation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># with the one open retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">open_retrospective</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># [ &lt;Retrospective:0xb2faa0 id: 22, title: &quot;My Project Sprint 2&quot;, status: &quot;closed&quot;&gt; ]</span></span></span></code></pre>\n<p class=\"markdown-para\">Since <code>where</code> always returns a relation (unlike <code>find_by</code> which returns the model instance), usage of this scope in application code can call <code>first</code> to get the model instance:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># anywhere in service code that needs the one open retro</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">retro </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">open_retrospective</span><span class=\"mtk1\">.</span><span class=\"mtk5\">first</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"lessons-learned\" style=\"position:relative;\"><a href=\"#lessons-learned\" aria-label=\"lessons learned permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lessons Learned</h2>\n<p class=\"markdown-para\">A few things learned from this experience:</p>\n<p class=\"markdown-para\">It seems that ChatGPT saw my original code using the finder method, and knew that scopes are a good solution for query re-usability, so it simply placed the finder in a scope. It did not make the inference that <code>find_by</code> doesn't return an ActiveRecord relation, therefore it doesn't make sense to put that in a scope.</p>\n<p class=\"markdown-para\">Always try positive and negative cases, whether its code you wrote yourself, or suggested by AI. Recall the positive case seemed to work, but unexpected results were encountered in the negative case.</p>\n<p class=\"markdown-para\">While ChatGPT can improve developer productivity, it may not fully understand the frameworks and libraries you're using, resulting in the introduction of subtle bugs. For now, any code it generates requires careful double-checking before committing.</p>\n<p class=\"markdown-para\">The <a href=\"https://guides.rubyonrails.org/\" class=\"markdown-link\">Rails Guides</a> and <a href=\"https://api.rubyonrails.org/\" class=\"markdown-link\">API docs</a> are fantastic resources. If you ever run into seemingly \"weird\" behaviour with Rails, there's a good chance you'll find an explanation here.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":7,"tableOfContents":"<ul>\n<li><a href=\"#the-problem\">The Problem</a></li>\n<li><a href=\"#ask-chatgpt\">Ask ChatGPT</a></li>\n<li><a href=\"#ask-the-docs\">Ask the Docs</a></li>\n<li><a href=\"#solution\">Solution</a></li>\n<li><a href=\"#lessons-learned\">Lessons Learned</a></li>\n</ul>","frontmatter":{"title":"A Tale of Rails, ChatGPT, and Scopes","date":"01 Jan 2024","description":"Learn from this cautionary tale about using ChatGPT in an attempt to improve some code duplication in Rails. Explore the challenges faced while optimizing a routine query and the valuable lessons learned about Rails scopes.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#88a8d8","images":{"fallback":{"src":"/static/6a7549b18238d8d5eea0e365c15f3c5f/d730f/rails-scopes-chatgpt-elizabeth-gottwald-dnIWYrliZfU-unsplash.jpg","srcSet":"/static/6a7549b18238d8d5eea0e365c15f3c5f/b834a/rails-scopes-chatgpt-elizabeth-gottwald-dnIWYrliZfU-unsplash.jpg 225w,\n/static/6a7549b18238d8d5eea0e365c15f3c5f/21c52/rails-scopes-chatgpt-elizabeth-gottwald-dnIWYrliZfU-unsplash.jpg 450w,\n/static/6a7549b18238d8d5eea0e365c15f3c5f/d730f/rails-scopes-chatgpt-elizabeth-gottwald-dnIWYrliZfU-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/6a7549b18238d8d5eea0e365c15f3c5f/71a10/rails-scopes-chatgpt-elizabeth-gottwald-dnIWYrliZfU-unsplash.webp 225w,\n/static/6a7549b18238d8d5eea0e365c15f3c5f/901f1/rails-scopes-chatgpt-elizabeth-gottwald-dnIWYrliZfU-unsplash.webp 450w,\n/static/6a7549b18238d8d5eea0e365c15f3c5f/5acd1/rails-scopes-chatgpt-elizabeth-gottwald-dnIWYrliZfU-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":599}}}},"fields":{"slug":"/blog/a-tale-of-rails-chatgpt-and-scopes/"}},"relatedP":{"edges":[{"node":{"id":"40da9b16-4faf-592a-b9c0-49d94a2304f9","frontmatter":{"title":"Rails Enums with MySQL or Postgres","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/44e499371e6e83708de5e52b055c6d08/26528/enum-jake-hills-0hgiQQEi4ic-unsplash.jpg","srcSet":"/static/44e499371e6e83708de5e52b055c6d08/26528/enum-jake-hills-0hgiQQEi4ic-unsplash.jpg 300w,\n/static/44e499371e6e83708de5e52b055c6d08/43429/enum-jake-hills-0hgiQQEi4ic-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/44e499371e6e83708de5e52b055c6d08/5d6c3/enum-jake-hills-0hgiQQEi4ic-unsplash.webp 300w,\n/static/44e499371e6e83708de5e52b055c6d08/68dbc/enum-jake-hills-0hgiQQEi4ic-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/rails-enum-mysql-postgres/"}}},{"node":{"id":"fff6ecc2-0dbb-59b1-80bb-97c0c24f82dd","frontmatter":{"title":"They Don't All Have To Be ActiveRecord Models","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#182828","images":{"fallback":{"src":"/static/f09c57681d2f9326aa60bbeee916a2c4/26528/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.jpg","srcSet":"/static/f09c57681d2f9326aa60bbeee916a2c4/26528/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.jpg 300w,\n/static/f09c57681d2f9326aa60bbeee916a2c4/43429/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/f09c57681d2f9326aa60bbeee916a2c4/5d6c3/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.webp 300w,\n/static/f09c57681d2f9326aa60bbeee916a2c4/68dbc/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/they-dont-all-have-to-be-activerecord-models/"}}},{"node":{"id":"d84ac79f-d860-544a-8abb-63add1da9214","frontmatter":{"title":"Understanding ActiveRecord Dependent Options","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#282828","images":{"fallback":{"src":"/static/b7f7064c193fa4dc20f20d253e1928fa/26528/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.jpg","srcSet":"/static/b7f7064c193fa4dc20f20d253e1928fa/26528/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.jpg 300w,\n/static/b7f7064c193fa4dc20f20d253e1928fa/43429/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/b7f7064c193fa4dc20f20d253e1928fa/5d6c3/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.webp 300w,\n/static/b7f7064c193fa4dc20f20d253e1928fa/68dbc/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/activerecord-dependent-options/"}}}]}},"pageContext":{"slug":"/blog/a-tale-of-rails-chatgpt-and-scopes/","relatedPosts":["Understanding ActiveRecord Dependent Options","Rails Enums with MySQL or Postgres","They Don't All Have To Be ActiveRecord Models"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}