{"componentChunkName":"component---src-templates-post-js","path":"/blog/when-rspec-doesnt-rollback/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">This post will walk you through some troubleshooting techniques when <a href=\"https://rspec.info/\" class=\"markdown-link\">RSpec</a> tests are failing due to unexpected data in the test database. I had experienced some RSpec tests that were passing the first time they ran, individually, but then failing on subsequent runs, or when run as part of the entire test suite. It turned out to be a combination of two things - not fully understanding how RSpec manages transactions, and how using or not using <code>let/let!</code> helper methods can impact this.</p>\n<h2 class=\"markdown-subtitle\" id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p class=\"markdown-para\">The RSpec tests are part of a Rails project using the <a href=\"https://github.com/rspec/rspec-rails\" class=\"markdown-link\">rspec-rails</a> gem. The tests also make use of the <a href=\"https://github.com/thoughtbot/factory_bot\" class=\"markdown-link\">FactoryBot</a> and <a href=\"https://github.com/faker-ruby/faker\" class=\"markdown-link\">faker</a> gems to create test data. This post assumes some familiarity with these tools. The other thing to know is I listen to the <a href=\"https://www.bikeshed.fm/\" class=\"markdown-link\">Bike Shed</a> podcast, and recently there have been some discussions about not using <code>let</code>, or at least, avoid <a href=\"https://thoughtbot.com/blog/lets-not\" class=\"markdown-link\">overusing</a> it.</p>\n<p class=\"markdown-para\">The <code>rails_helper.rb</code>, which is included in every spec file configures transactions as follows:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># spec/rails_helper.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">RSpec</span><span class=\"mtk1\">.configure </span><span class=\"mtk7\">do</span><span class=\"mtk1\"> |config|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  config.use_transactional_fixtures </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># other config ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">My understanding of this setting was that data inserted into the test database <em class=\"markdown-emphasis\">anywhere</em> in a test would always get rolled back, leaving the database nice and clean for the next test.</p>\n<h2 class=\"markdown-subtitle\" id=\"failing-test\" style=\"position:relative;\"><a href=\"#failing-test\" aria-label=\"failing test permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Failing Test</h2>\n<p class=\"markdown-para\">Here is the troublesome test, it's for a subscription management app. It creates several different plans for an email service, exercises some code that generates the available options based on what's in the database, and then expects exactly two options to be available:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;rails_helper&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">describe </span><span class=\"mtk6\">&quot;my test class&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;month&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;year&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  it </span><span class=\"mtk6\">&quot;some test&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Plan</span><span class=\"mtk1\">.generate_options(</span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># expects exactly two options: a monthly plan and a yearly plan</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">This test would pass when run individually and the first time but fail on subsequent runs. Also when run as part of a suite, other tests that also depended on exactly two options being available were failing. The failures were all due to more plans being available in the database than expected. For example, 4 instead of 2, and on the next run, 6 instead of 2, and so on.</p>\n<p class=\"markdown-para\">Before moving on with troubleshooting, there's a command you can run to reset the test database. This is needed to reproduce the problem of \"run the test first time, it passes, subsequent runs, it fails\":</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Rails 5+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bin/rails db:reset RAILS_ENV=test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Older versions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bundle </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> rake db:reset RAILS_ENV=test</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"test-database\" style=\"position:relative;\"><a href=\"#test-database\" aria-label=\"test database permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Database</h2>\n<p class=\"markdown-para\">My first step in troubleshooting was to connect to the test database (this project uses MySQL) and see what's in the <code>plans</code> table upon completion of a test run. This project does not run seeds against the test database, therefore the <code>plans</code> table should be empty after tests run, since any data created during the test should have been rolled back.</p>\n<p class=\"markdown-para\">Check your projects <code>config/database.yml</code> to determine the name of the test database. By default, if your development database is named <code>myapp</code>, then the test database will be <code>myapp_test</code>.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">mysql -u root -D myapp_test</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">mysql&gt; SELECT COUNT(*) FROM plans;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2</span></span></code></pre>\n<p class=\"markdown-para\">That's not right, the count should have returned 0. I ran the test again, then the count returned 4. This confirms that the plan data inserted during the test is not being rolled back, but why?</p>\n<h2 class=\"markdown-subtitle\" id=\"test-log\" style=\"position:relative;\"><a href=\"#test-log\" aria-label=\"test log permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Log</h2>\n<p class=\"markdown-para\">Next step in troubleshooting was to inspect the <code>log/test.log</code> file at the project root. By default, when tests run, all activity that would normally be displayed in the terminal when a Rails server is running, gets saved in this log file. This includes database inserts. Let's see if it reveals any clues as to what's going on with the database when this test is running.</p>\n<p class=\"markdown-para\">Here is the relevant portion of the file from running this test:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">BEGIN</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;month&#39;, &#39;2022-07-27 19:59:17&#39;, &#39;2022-07-27 19:59:17&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">COMMIT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">BEGIN</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;year&#39;, &#39;2022-07-27 19:59:17&#39;, &#39;2022-07-27 19:59:17&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">COMMIT</span></span></code></pre>\n<p class=\"markdown-para\">The insert statements are a result of the <code>FactoryBot.create(:plan...)</code> methods run by the test. That part is expected. However, the INSERTs are being committed rather than rolled back. That is unexpected.</p>\n<h2 class=\"markdown-subtitle\" id=\"where-is-data-created\" style=\"position:relative;\"><a href=\"#where-is-data-created\" aria-label=\"where is data created permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where is data created?</h2>\n<p class=\"markdown-para\">Taking a closer look at what the RSpec docs have to say about <a href=\"https://relishapp.com/rspec/rspec-rails/docs/transactions\" class=\"markdown-link\">transactions</a>:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">What it really means in Rails is \"run every test method within a transaction.\" In the context of rspec-rails, it means \"run every example within a transaction.\"</p>\n</blockquote>\n<p class=\"markdown-para\">So any data created within an example will be run within a transaction and rolled back. However, is data created within a <code>describe</code> block considered part of the example? Doing some research on RSpec and rollbacks led me to this Stack Overflow <a href=\"https://stackoverflow.com/questions/3333743/factory-girl-rspec-doesnt-seem-to-roll-back-changes-after-each-example/24372747#24372747\" class=\"markdown-link\">answer</a>. The sentence in particular:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">... use transactional fixtures will clear the DB as long as you created the data in the example itself. before :all do ... end is considered outside of the example, because the data remains untouched across multiple examples. Whatever you create in before :all you have to delete in after :all.</p>\n</blockquote>\n<p class=\"markdown-para\">Although my test wasn't using a <code>before</code> block, this got me wondering whether data created in a <code>describe</code> block is considered <em class=\"markdown-emphasis\">outside</em> of the example? To answer this question, I modified the test to move the data creation into the <code>it</code> block:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;rails_helper&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">describe </span><span class=\"mtk6\">&quot;my test class&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  it </span><span class=\"mtk6\">&quot;some test&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;month&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;year&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Plan</span><span class=\"mtk1\">.generate_options(</span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># expects exactly two options: a monthly plan and a yearly plan</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">After running this version of the test, I checked the test database to see if it was clean - and it was. This time there were no records left in the <code>plans</code> table after the test run:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">mysql -u root -D myapp_test</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">mysql&gt; SELECT COUNT(*) FROM plans;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">0</span></span></code></pre>\n<p class=\"markdown-para\">I also checked what got generated in the <code>log/test.log</code> file. This time both inserts into the <code>plans</code> table are wrapped in named transactions using <a href=\"https://dev.mysql.com/doc/refman/8.0/en/savepoint.html\" class=\"markdown-link\">SAVEPOINT</a>, and rolled back at the end of the test:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">BEGIN</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;month&#39;, &#39;2022-07-27 20:59:17&#39;, &#39;2022-07-27 20:59:17&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;year&#39;, &#39;2022-07-27 20:59:17&#39;, &#39;2022-07-27 20:59:17&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ROLLBACK</span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"multiple-tests-with-same-data\" style=\"position:relative;\"><a href=\"#multiple-tests-with-same-data\" aria-label=\"multiple tests with same data permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple Tests with Same Data</h2>\n<p class=\"markdown-para\">Good, so creating the data in the <code>it</code> block solves this problem. But what if there are other tests in the same test file and <code>describe</code> block that also need this data?</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"repeat-data-creation\" style=\"position:relative;\"><a href=\"#repeat-data-creation\" aria-label=\"repeat data creation permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repeat Data Creation</h3>\n<p class=\"markdown-para\">One way to solve for this would be to repeat the test data creation in each test that needs it. Since transactional fixtures are enabled, the database inserts will be rolled back at the end of each example so each test will get a clean start. I've also added some temporary logging statements at the beginning of each test, which will help in identifying each run in the <code>log/test.log</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;rails_helper&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">describe </span><span class=\"mtk6\">&quot;my test class&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  it </span><span class=\"mtk6\">&quot;some test&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.logger.info(</span><span class=\"mtk6\">&quot;SOME TEST&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;month&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;year&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Plan</span><span class=\"mtk1\">.generate_options(</span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># expects exactly two options: a monthly plan and a yearly plan</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  it </span><span class=\"mtk6\">&quot;some other test&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.logger.info(</span><span class=\"mtk6\">&quot;SOME OTHER TEST&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;month&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;year&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">The <code>log/test.log</code> from this test run confirms a transaction is created and rolled back for each example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">BEGIN</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SOME TEST</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;month&#39;, &#39;2022-07-27 21:59:17&#39;, &#39;2022-07-27 21:59:17&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;year&#39;, &#39;2022-07-27 21:59:18&#39;, &#39;2022-07-27 21:59:18&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ROLLBACK</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">BEGIN</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SOME OTHER TEST</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;month&#39;, &#39;2022-07-27 21:59:19&#39;, &#39;2022-07-27 21:59:19&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;year&#39;, &#39;2022-07-27 21:59:20&#39;, &#39;2022-07-27 21:59:20&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ROLLBACK</span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"use-describe-and-let\" style=\"position:relative;\"><a href=\"#use-describe-and-let\" aria-label=\"use describe and let permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Describe and Let</h3>\n<p class=\"markdown-para\">But then I wondered whether use of the <a href=\"https://relishapp.com/rspec/rspec-core/docs/helper-methods/let-and-let\" class=\"markdown-link\">let</a> helper method could also solve for this, to avoid having to repeat the data creation statements in each example. In the test below, the data creation has been moved out of each <code>it</code> block and into the <code>describe</code> block, but using the <code>let!</code> helper method. I'm using the \"bang\" version of it to force execution because these tests need the data to already be there. Otherwise, the regular version <code>let</code> is lazily evaluated:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;rails_helper&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">describe </span><span class=\"mtk6\">&quot;my test class&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  let!(</span><span class=\"mtk4\">:monthly_plan</span><span class=\"mtk1\">) { </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;month&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  let!(</span><span class=\"mtk4\">:annual_plan</span><span class=\"mtk1\">) { </span><span class=\"mtk9 mtki\">FactoryBot</span><span class=\"mtk1\">.create(</span><span class=\"mtk4\">:plan</span><span class=\"mtk1\">, </span><span class=\"mtk4\">recurring_interval:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;year&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  it </span><span class=\"mtk6\">&quot;some test&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.logger.info(</span><span class=\"mtk6\">&quot;SOME TEST&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Plan</span><span class=\"mtk1\">.generate_options(</span><span class=\"mtk4\">service_type:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;email&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># expects exactly two options: a monthly plan and a yearly plan</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  it </span><span class=\"mtk6\">&quot;some other test&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.logger.info(</span><span class=\"mtk6\">&quot;SOME OTHER TEST&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">This version of the test also passed, even on repeated runs. Taking a look at the <code>log/test.log</code> after this test run, the data creation happens before the logging statements and is repeated for each test, but this time, it does get included in the transaction, even though it occurs in the <code>describe</code> block. This is the effect of using the <code>let!</code> helper:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">BEGIN</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;month&#39;, &#39;2022-07-27 22:59:17&#39;, &#39;2022-07-27 22:59:17&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;year&#39;, &#39;2022-07-27 22:59:18&#39;, &#39;2022-07-27 22:59:18&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SOME TEST</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ROLLBACK</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">BEGIN</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;month&#39;, &#39;2022-07-27 22:59:19&#39;, &#39;2022-07-27 22:59:19&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Plan Create INSERT INTO `plans` (`service_type`, `recurring_interval`, `created_at`, `updated_at`)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">             VALUES (&#39;email&#39;, &#39;year&#39;, &#39;2022-07-27 22:59:20&#39;, &#39;2022-07-27 22:59:20&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">RELEASE SAVEPOINT active_record_1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">SOME OTHER TEST</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ROLLBACK</span></span></code></pre>\n<p class=\"markdown-para\">The <a href=\"https://relishapp.com/rspec/rspec-core/docs/helper-methods/let-and-let\" class=\"markdown-link\">docs</a> for the <code>let/let!</code> helper methods say:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">The value will be cached across multiple calls in the same example but not across examples.</p>\n</blockquote>\n<p class=\"markdown-para\">Which explains why the inserts are running repeatedly for each test. But what was less clear to me was that using the <code>let/let!</code> helper moves the execution of the logic into the transaction and therefore gets rolled back. Recall when the data creation was run in the <code>describe</code> block without the use of <code>let/let!</code> helper, it ran outside of each test transaction and got committed.</p>\n<h2 class=\"markdown-subtitle\" id=\"which-is-better\" style=\"position:relative;\"><a href=\"#which-is-better\" aria-label=\"which is better permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Which is Better?</h2>\n<p class=\"markdown-para\">So the problem of ensuring created data is rolled back can be solved in two ways. Either specify the data creation right in each example that needs it, i.e. in the <code>it</code> block, OR, if multiple tests need the same data, it can be created up one level in the <code>describe</code>, but then it must use the <code>let/let!</code> helper methods.</p>\n<p class=\"markdown-para\">Given the <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" class=\"markdown-link\">DRY</a> principle, it's tempting to say the better solution is to move the data creation up into <code>describe</code> block so it doesn't need to be repeated for each test. However, this has no impact on test performance because the data will still be created and rolled back for each example (as we saw earlier in the <code>log/test.log</code> file).</p>\n<p class=\"markdown-para\">Also \"DRYing\" up the tests can make them harder to read as it requires scrolling up to the top of the test file to understand where data, variables etc were defined. For a small test file maybe this isn't a big deal but can become an issue as the number of tests grow.</p>\n<aside class=\"markdown-aside\">\nA full discussion of optimal test design, is outside the scope of this post, but if you're interested in this topic, check out this Stack Overflow discussion on <a class=\"markdown-link\" href=\"https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests\">DAMP vs DRY</a> and an <a class=\"markdown-link\" href=\"https://www.globalapptesting.com/engineering/lets-take-a-closer-look-at-the-tests-created-in-rspec\">RSpec specific take</a> on DRY and let.\n</aside>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">This post has covered some troubleshooting techniques you can use when RSpec tests are failing due to data not being cleaned up from the test database. Using these techniques, we have discovered that the <code>let/let!</code> helper methods have the effect of including any data created as part of the example's transaction. We also briefly touched on test design as to where data creation should be located.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":10,"tableOfContents":"<ul>\n<li>\n<p><a href=\"#setup\">Setup</a></p>\n</li>\n<li>\n<p><a href=\"#failing-test\">Failing Test</a></p>\n</li>\n<li>\n<p><a href=\"#test-database\">Test Database</a></p>\n</li>\n<li>\n<p><a href=\"#test-log\">Test Log</a></p>\n</li>\n<li>\n<p><a href=\"#where-is-data-created\">Where is data created?</a></p>\n</li>\n<li>\n<p><a href=\"#multiple-tests-with-same-data\">Multiple Tests with Same Data</a></p>\n<ul>\n<li><a href=\"#repeat-data-creation\">Repeat Data Creation</a></li>\n<li><a href=\"#use-describe-and-let\">Use Describe and Let</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#which-is-better\">Which is Better?</a></p>\n</li>\n<li>\n<p><a href=\"#conclusion\">Conclusion</a></p>\n</li>\n</ul>","frontmatter":{"title":"When RSpec Doesn't Rollback","date":"01 Dec 2022","description":"Learn some troubleshooting techniques with RSpec and database transactions.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#885828","images":{"fallback":{"src":"/static/17aadb690ca81dfbfd637f00bbeffc28/631de/rspec-rollback-mihaly-koles-Ec_WHv4aAno-unsplash.jpg","srcSet":"/static/17aadb690ca81dfbfd637f00bbeffc28/da49e/rspec-rollback-mihaly-koles-Ec_WHv4aAno-unsplash.jpg 225w,\n/static/17aadb690ca81dfbfd637f00bbeffc28/640e7/rspec-rollback-mihaly-koles-Ec_WHv4aAno-unsplash.jpg 450w,\n/static/17aadb690ca81dfbfd637f00bbeffc28/631de/rspec-rollback-mihaly-koles-Ec_WHv4aAno-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/17aadb690ca81dfbfd637f00bbeffc28/aabb3/rspec-rollback-mihaly-koles-Ec_WHv4aAno-unsplash.webp 225w,\n/static/17aadb690ca81dfbfd637f00bbeffc28/d07da/rspec-rollback-mihaly-koles-Ec_WHv4aAno-unsplash.webp 450w,\n/static/17aadb690ca81dfbfd637f00bbeffc28/50f9d/rspec-rollback-mihaly-koles-Ec_WHv4aAno-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":468}}}},"fields":{"slug":"/blog/when-rspec-doesnt-rollback/"}},"relatedP":{"edges":[{"node":{"id":"df308377-3f0e-5aae-8cce-4e9377304daa","frontmatter":{"title":"Solving a Python Interview Question in Ruby","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/41cac534f5048f26531ee516516637b1/26528/python-interview-question.jpg","srcSet":"/static/41cac534f5048f26531ee516516637b1/26528/python-interview-question.jpg 300w,\n/static/41cac534f5048f26531ee516516637b1/43429/python-interview-question.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/41cac534f5048f26531ee516516637b1/5d6c3/python-interview-question.webp 300w,\n/static/41cac534f5048f26531ee516516637b1/68dbc/python-interview-question.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/python-interview-question-in-ruby/"}}},{"node":{"id":"05e58406-96e0-5834-a969-f60a98704666","frontmatter":{"title":"Start a Rails 6 Project with RSpec","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#283848","images":{"fallback":{"src":"/static/36121c07924fc545e6336936bc7765a0/26528/scaffold-rails-jack-b-S3SU988T13A-unsplash.jpg","srcSet":"/static/36121c07924fc545e6336936bc7765a0/26528/scaffold-rails-jack-b-S3SU988T13A-unsplash.jpg 300w,\n/static/36121c07924fc545e6336936bc7765a0/43429/scaffold-rails-jack-b-S3SU988T13A-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/36121c07924fc545e6336936bc7765a0/5d6c3/scaffold-rails-jack-b-S3SU988T13A-unsplash.webp 300w,\n/static/36121c07924fc545e6336936bc7765a0/68dbc/scaffold-rails-jack-b-S3SU988T13A-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/start-rails-6-project-with-rspec/"}}},{"node":{"id":"334ba24b-01a2-58f3-9962-67e64296c56e","frontmatter":{"title":"Testing Faraday with RSpec","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/69f6b56407e655dd690ba4b363161733/26528/faraday-alex-kondratiev-H9t723yPjYI-unsplash.jpg","srcSet":"/static/69f6b56407e655dd690ba4b363161733/26528/faraday-alex-kondratiev-H9t723yPjYI-unsplash.jpg 300w,\n/static/69f6b56407e655dd690ba4b363161733/43429/faraday-alex-kondratiev-H9t723yPjYI-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/69f6b56407e655dd690ba4b363161733/5d6c3/faraday-alex-kondratiev-H9t723yPjYI-unsplash.webp 300w,\n/static/69f6b56407e655dd690ba4b363161733/68dbc/faraday-alex-kondratiev-H9t723yPjYI-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/testing-faraday-with-rspec/"}}}]}},"pageContext":{"slug":"/blog/when-rspec-doesnt-rollback/","relatedPosts":["Start a Rails 6 Project with RSpec","Testing Faraday with RSpec","Solving a Python Interview Question in Ruby"]}},"staticQueryHashes":["163244226"]}