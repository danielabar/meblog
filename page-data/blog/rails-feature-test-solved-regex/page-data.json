{"componentChunkName":"component---src-templates-post-js","path":"/blog/rails-feature-test-solved-regex/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">If you’ve been programming for awhile, you’ve probably encountered regular expressions, and more specifically, this saying:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">Some people, when confronted with a problem, think “I know, I'll use regular expressions.” Now they have two problems.</p>\n</blockquote>\n<p class=\"markdown-para\">There's some discussion as to the origin of this saying <a href=\"http://regex.info/blog/2006-09-15/247\" class=\"markdown-link\">here</a>. Personally, I approach the use of regular expressions (aka regex) in my code with some trepidation, as they can be difficult to read, and I prefer to leave clean, easy to read code for the future developers (including myself) who will maintain the code.</p>\n<p class=\"markdown-para\">However, sometimes it is the optimal choice. This post will walk through an example, where using a regex was useful in expressing an expectation in a feature test for a Rails project, plus a nice Ruby way of writing the regex that makes it easier to read.</p>\n<h2 class=\"markdown-subtitle\" id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h2>\n<p class=\"markdown-para\">The application I’m working on allows users to setup multi-factor authentication. The last screen of the setup displays a recovery code that the user can enter in the event that they get locked out of their account. This code is a series of 16 randomly generated numbers and letters, displayed in chunks of 4, each separated by a space for legibility. Here's a sample recovery code:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">1f08 6a11 b093 8fd6</span></span></code></pre>\n<p class=\"markdown-para\">After a PR got merged that made some changes to the multi-factor flow, a bug was introduced where the recovery code was no longer being displayed. The user would still get the screen instructing them to save the recovery code, but where the code should be displayed was a blank.</p>\n<p class=\"markdown-para\">Investigation revealed that the recovery code was still being generated by the server, but a UI bug was preventing it from being displayed. The fix was straightforward, however, this application has a very thorough suite of feature tests and I was surprised that one of the tests had not caught this bug.</p>\n<h2 class=\"markdown-subtitle\" id=\"feature-test\" style=\"position:relative;\"><a href=\"#feature-test\" aria-label=\"feature test permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Feature Test</h2>\n<p class=\"markdown-para\">Turns out there was a feature test that runs through the multi-factor auth steps, but it only verified that the user landed on the recovery screen by verifying the page title. It did not verify that the recovery code was actually displayed. As part of fixing this bug, this test had to be enhanced to also verify the display of the recovery code.</p>\n<p class=\"markdown-para\">Here is a portion of the markup that displays the recovery code:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"html\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;</span><span class=\"mtk7\">p</span><span class=\"mtk1\">&gt;Code: &lt;</span><span class=\"mtk7\">strong</span><span class=\"mtk1\">&gt;1f08 6a11 b093 8fd6&lt;/</span><span class=\"mtk7\">strong</span><span class=\"mtk1\">&gt;&lt;/</span><span class=\"mtk7\">p</span><span class=\"mtk1\">&gt;</span></span></span></code></pre>\n<p class=\"markdown-para\">To make it easier to test, I first added a <code>data-test</code> attribute to the element containing the recovery code:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"html\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;</span><span class=\"mtk7\">p</span><span class=\"mtk1\">&gt;Code: &lt;</span><span class=\"mtk7\">strong</span><span class=\"mtk1\"> </span><span class=\"mtk5\">data-test</span><span class=\"mtk1\">=</span><span class=\"mtk6\">&quot;recovery-code&quot;</span><span class=\"mtk1\">&gt;1f08 6a11 b093 8fd6&lt;/</span><span class=\"mtk7\">strong</span><span class=\"mtk1\">&gt;&lt;/</span><span class=\"mtk7\">p</span><span class=\"mtk1\">&gt;</span></span></span></code></pre>\n<p class=\"markdown-para\">Next I needed to add a step to the feature test to retrieve the element containing the recovery code by <code>data-test</code> selector and verify its contents. Capybara's <a href=\"https://github.com/teamcapybara/capybara#querying\" class=\"markdown-link\">have_selector</a> RSpec matcher is useful for finding an element by selector and text value. For example, given the following markup:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"html\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;</span><span class=\"mtk7\">div</span><span class=\"mtk1\"> </span><span class=\"mtk5\">data-test</span><span class=\"mtk1\">=</span><span class=\"mtk6\">&quot;message&quot;</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  Hello</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&lt;/</span><span class=\"mtk7\">div</span><span class=\"mtk1\">&gt;</span></span></span></code></pre>\n<p class=\"markdown-para\">A feature test could select this element and verify its contents as follows:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">expect(page).to have_selector(</span><span class=\"mtk6\">&quot;div[data-test=&#39;message&#39;]&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">text:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;Hello&quot;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"regex\" style=\"position:relative;\"><a href=\"#regex\" aria-label=\"regex permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regex</h2>\n<p class=\"markdown-para\">In the case of the recovery code, the text value is randomly generated so it won’t work to have a static value in the text option for the <code>have_selector</code> matcher. What's needed is a way to express: The recovery code should look like 4 alpha numeric characters, followed by a space, followed by 4 more alpha numeric characters, and so on. This is where a regex is a good solution. It turns out, the text option of Capybara's <code>have_selector</code> also accepts a regular expression. So the test to verify that the recovery code is displayed needs to look something like this:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># This expectation will pass if the string in element recovery-code matches the regex /TBD/.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">expect(page).to have_selector(</span><span class=\"mtk6\">&quot;strong[data-test=&#39;recovery-code&#39;]&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">text:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">/TBD/</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nIt's not obvious from the Capybara docs that there even is a text option or that it also accepts a regex. This Stackoverflow Q&A goes through the source to determine the <a class=\"markdown-link\" href=\"https://stackoverflow.com/questions/23961636/what-are-the-options-to-capybaras-have-selector\">supported options</a>.\n</aside>\n<p class=\"markdown-para\">To match the recovery code accurately, the regex needs to match on any 4 letters or numbers, followed by a space, followed by any 4 letters or numbers, up to 4 chunks of these. To match any letter or number the <code>\\w</code> shorthand can be used, which is equivalent to <code>[0-9a-zA-Z_]</code>. To specify 4 of these, the range repetition syntax <code>{n}</code> can be used. For example to specify 4 characters in a row: <code>\\w{4}</code>. To match the whitespace, <code>\\s</code> is used. Putting this all together:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">expect(page).to have_selector(</span><span class=\"mtk6\">&quot;strong[data-test=&#39;recovery-code&#39;]&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">text:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">/</span><span class=\"mtk4\">\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk4\">\\s\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk4\">\\s\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk4\">\\s\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk6\">/</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p class=\"markdown-para\">While this works, it's difficult to read. Fortunately, Ruby has an alternate syntax for specifying a regex that is not whitespace sensitive. To use it, wrap the regex in <code>%r{...}</code> instead of <code>/.../</code>, then add the <code>x</code> modifier which makes it ignore whitespace. This allows the regex to be split up among multiple lines, and it can even have comments beside each line. So the previous line can be rewritten as:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">recovery_code_format </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">%r{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">  </span><span class=\"mtk4\">\\w</span><span class=\"mtk6\">{</span><span class=\"mtk4\">4</span><span class=\"mtk1\">}     </span><span class=\"mtk3\"># Any 4 characters</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  \\s        </span><span class=\"mtk3\"># Whitespace character</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  \\w{</span><span class=\"mtk4\">4</span><span class=\"mtk1\">}     </span><span class=\"mtk3\"># Any 4 characters</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  \\s        </span><span class=\"mtk3\"># Whitespace character</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  \\w{</span><span class=\"mtk4\">4</span><span class=\"mtk1\">}     </span><span class=\"mtk3\"># Any 4 characters</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  \\s        </span><span class=\"mtk3\"># Whitespace character</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  \\w{</span><span class=\"mtk4\">4</span><span class=\"mtk1\">}     </span><span class=\"mtk3\"># Any 4 characters</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}x</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">expect(page).to have_selector(</span><span class=\"mtk6\">&quot;strong[data-test=&#39;recovery-code&#39;]&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">text:</span><span class=\"mtk1\"> recovery_code_format)</span></span></span></code></pre>\n<p class=\"markdown-para\">This is much more legible and easier to maintain should the recovery code format change in the future.</p>\n<aside class=\"markdown-aside\">\nIt's beyond the scope of this post to go in depth on regex in Ruby. See this excellent <a class=\"markdown-link\" href=\"https://www.rubyguides.com/2015/06/ruby-regex/\">guide</a> for more on this topic.\n</aside>\n<h2 class=\"markdown-subtitle\" id=\"interactive-regex\" style=\"position:relative;\"><a href=\"#interactive-regex\" aria-label=\"interactive regex permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interactive Regex</h2>\n<p class=\"markdown-para\">Unless you're writing regex's constantly, it's unlikely your first attempt will be correct. In the example covered in this post, it's being used as part of a Capybara feature test. Since feature tests are slower to run, it will take a relatively long time to get feedback on if the regex is working.</p>\n<p class=\"markdown-para\">To speed things up, launch a Rails or IRB console to try out the regex interactively, using the <code>=~</code> operator to determine if a regex matches a string. This operator returns the index occurrence of the first match or <code>nil</code> if there is no match. For example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">irb(main):</span><span class=\"mtk4\">001</span><span class=\"mtk1\">:</span><span class=\"mtk4\">0</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> recovery_code </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;1f08 6a11 b093 8fd6&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">irb(main):</span><span class=\"mtk4\">002</span><span class=\"mtk1\">:</span><span class=\"mtk4\">0</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> recovery_code </span><span class=\"mtk7\">=~</span><span class=\"mtk1\"> </span><span class=\"mtk6\">/</span><span class=\"mtk4\">\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk4\">\\s\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk4\">\\s\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk4\">\\s\\w</span><span class=\"mtk7\">{4}</span><span class=\"mtk6\">/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; </span><span class=\"mtk4\">0</span><span class=\"mtk1\">   </span><span class=\"mtk3\"># This means a match was found at position 0 of recovery_code.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># test some more inputs...</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">This post has covered a use case for regex in a Capybara feature test for Rails, how to make it legible, and how to try it out in the console to get quick feedback.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":5,"tableOfContents":"<ul>\n<li><a href=\"#the-problem\">The Problem</a></li>\n<li><a href=\"#feature-test\">Feature Test</a></li>\n<li><a href=\"#regex\">Regex</a></li>\n<li><a href=\"#interactive-regex\">Interactive Regex</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Rails Feature Test Solved by Regex","date":"01 Nov 2021","description":"An example where regex was a good solution for a Rails feature test.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#487898","images":{"fallback":{"src":"/static/4b2924a3726801417360b49f81f7747b/fd980/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.jpg","srcSet":"/static/4b2924a3726801417360b49f81f7747b/00be4/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.jpg 225w,\n/static/4b2924a3726801417360b49f81f7747b/66ebe/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.jpg 450w,\n/static/4b2924a3726801417360b49f81f7747b/fd980/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/4b2924a3726801417360b49f81f7747b/c5403/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.webp 225w,\n/static/4b2924a3726801417360b49f81f7747b/edfe1/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.webp 450w,\n/static/4b2924a3726801417360b49f81f7747b/b19f4/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":675}}}},"fields":{"slug":"/blog/rails-feature-test-solved-regex/"}},"relatedP":{"edges":[{"node":{"id":"46775b70-43f2-584d-8c65-327ac46ebbd7","frontmatter":{"title":"Dockerize a Rails Application for Development","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#d8c8d8","images":{"fallback":{"src":"/static/3281f20a27a3ba24dcc1ca78c639c25d/26528/docker-rails-shipping-containers.jpg","srcSet":"/static/3281f20a27a3ba24dcc1ca78c639c25d/26528/docker-rails-shipping-containers.jpg 300w,\n/static/3281f20a27a3ba24dcc1ca78c639c25d/43429/docker-rails-shipping-containers.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/3281f20a27a3ba24dcc1ca78c639c25d/5d6c3/docker-rails-shipping-containers.webp 300w,\n/static/3281f20a27a3ba24dcc1ca78c639c25d/68dbc/docker-rails-shipping-containers.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/dockerize-rails-app-for-dev-debug-and-testing/"}}},{"node":{"id":"0c2e1691-4b14-536c-acee-4d0f120de743","frontmatter":{"title":"Rails Strong Params for GET Request","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/30de304c73a206886f15aeaf89655663/26528/strong-params-sigmund-f0dJjQMhfXo-unsplash.jpg","srcSet":"/static/30de304c73a206886f15aeaf89655663/26528/strong-params-sigmund-f0dJjQMhfXo-unsplash.jpg 300w,\n/static/30de304c73a206886f15aeaf89655663/43429/strong-params-sigmund-f0dJjQMhfXo-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/30de304c73a206886f15aeaf89655663/5d6c3/strong-params-sigmund-f0dJjQMhfXo-unsplash.webp 300w,\n/static/30de304c73a206886f15aeaf89655663/68dbc/strong-params-sigmund-f0dJjQMhfXo-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/rails-strong-params-get/"}}},{"node":{"id":"d300ca38-a569-5f95-b2a5-0bf6c30486cc","frontmatter":{"title":"Use UUID for primary key with Rails and Postgres","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/30bb7a61cc87a3edc43f8af6d89fa013/26528/primary-keyflorian-berger-SzG0ncGBOeo-unsplash.jpg","srcSet":"/static/30bb7a61cc87a3edc43f8af6d89fa013/26528/primary-keyflorian-berger-SzG0ncGBOeo-unsplash.jpg 300w,\n/static/30bb7a61cc87a3edc43f8af6d89fa013/43429/primary-keyflorian-berger-SzG0ncGBOeo-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/30bb7a61cc87a3edc43f8af6d89fa013/5d6c3/primary-keyflorian-berger-SzG0ncGBOeo-unsplash.webp 300w,\n/static/30bb7a61cc87a3edc43f8af6d89fa013/68dbc/primary-keyflorian-berger-SzG0ncGBOeo-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/rails-uuid-primary-key-postgres/"}}}]}},"pageContext":{"slug":"/blog/rails-feature-test-solved-regex/","relatedPosts":["Dockerize a Rails Application for Development","Rails Strong Params for GET Request","Use UUID for primary key with Rails and Postgres"]}},"staticQueryHashes":["163244226"]}