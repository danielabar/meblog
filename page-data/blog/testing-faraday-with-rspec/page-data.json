{"componentChunkName":"component---src-templates-post-js","path":"/blog/testing-faraday-with-rspec/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">If you've ever developed code that had to integrate with a third party service that didn't have an up-to-date gem available, there's a good chance you've had to reach for an HTTP client to make requests to the service. <a href=\"https://github.com/lostisland/faraday\" class=\"markdown-link\">Faraday</a> is a popular choice. It's easy to use and well documented. However, the way in which it gets used will impact how the code can be tested. This post will go through two different ways it can be tested.</p>\n<h2 class=\"markdown-subtitle\" id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p class=\"markdown-para\">Suppose you're building an app to display today's weather in a given city. We'll be using the <a href=\"https://www.weatherapi.com/docs/\" class=\"markdown-link\">Weather API</a> to get the weather data via a restful API that returns JSON data. Usage requires signing up for an API key, but the free tier is very generous and will be adequate for this demo.</p>\n<p class=\"markdown-para\">A request to get the current weather and air quality index, for example, for Paris, looks like this:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"http\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">GET</span><span class=\"mtk1\"> https://api.weatherapi.com/v1/current.json?key=yourApiKey&amp;q=Paris&amp;aqi=yes</span></span></span></code></pre>\n<p class=\"markdown-para\">And the response looks something like this (shortened for brevity):</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"json\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;location&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;name&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;Paris&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;country&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;France&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;localtime&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;2021-08-08 23:00&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;current&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;last_updated&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;2021-08-08 22:00&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;temp_c&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk4\">18.0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;condition&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk9 mtki\">&quot;text&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;Partly cloudy&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk9 mtki\">&quot;icon&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;//cdn.weatherapi.com/weather/64x64/night/116.png&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk9 mtki\">&quot;code&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk4\">1003</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;feelslike_c&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk4\">18.0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;uv&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk4\">4.0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;air_quality&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk9 mtki\">&quot;us-epa-index&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk4\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">Here is the first attempt at writing the <code>WeatherClient</code> using Faraday. It exposes a single method <code>today</code> that makes a <code>Faraday.get</code> request to the weather api, and parses the response to return a sentence such as:</p>\n<p class=\"markdown-para\">\"Weather for Paris, France is 18 degrees. Cloudy. Air quality is Good.\"</p>\n<p class=\"markdown-para\">The mapping of <code>us-epa-index</code> to an air quality string such as <code>Good</code>, <code>Moderate</code> etc. comes from the Weather API docs. <a href=\"https://github.com/bkeepers/dotenv\" class=\"markdown-link\">dotenv</a> is used to avoid hard-coding the API key and instead pull it from a git ignored <code>.env</code> file.</p>\n<p class=\"markdown-para\">This is a plain old Ruby project with no Rails, so the dependencies are required:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># app/weather_client.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;dotenv/load&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;faraday&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;json&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">WeatherClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">today</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    response </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1/current.json&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">q:</span><span class=\"mtk1\"> city,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">aqi:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;yes&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">parse_today</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk5\">parse</span><span class=\"mtk1\">(response.</span><span class=\"mtk5\">body</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">private</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">parse_today</span><span class=\"mtk1\">(</span><span class=\"mtk10 mtki\">json</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    location </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> json[</span><span class=\"mtk6\">&#39;location&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    current </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> json[</span><span class=\"mtk6\">&#39;current&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    condition </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> current[</span><span class=\"mtk6\">&#39;condition&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk6\">&quot;Weather for </span><span class=\"mtk7\">#{</span><span class=\"mtk1\">location[</span><span class=\"mtk6\">&#39;name&#39;</span><span class=\"mtk1\">]</span><span class=\"mtk7\">}</span><span class=\"mtk6\">, </span><span class=\"mtk7\">#{</span><span class=\"mtk1\">location[</span><span class=\"mtk6\">&#39;country&#39;</span><span class=\"mtk1\">]</span><span class=\"mtk7\">}</span><span class=\"mtk6\"> is </span><span class=\"mtk7\">#{</span><span class=\"mtk1\">current[</span><span class=\"mtk6\">&#39;temp_c&#39;</span><span class=\"mtk1\">]</span><span class=\"mtk7\">}</span><span class=\"mtk6\"> degrees. </span><span class=\"mtk7\">#{</span><span class=\"mtk1\">condition[</span><span class=\"mtk6\">&#39;text&#39;</span><span class=\"mtk1\">]</span><span class=\"mtk7\">}</span><span class=\"mtk6\">.\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\"> Air quality is </span><span class=\"mtk7\">#{</span><span class=\"mtk5\">air_quality</span><span class=\"mtk1\">(current[</span><span class=\"mtk6\">&#39;air_quality&#39;</span><span class=\"mtk1\">][</span><span class=\"mtk6\">&#39;us-epa-index&#39;</span><span class=\"mtk1\">])</span><span class=\"mtk7\">}</span><span class=\"mtk6\">&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">air_quality</span><span class=\"mtk1\">(</span><span class=\"mtk10 mtki\">aq_val</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    aq_map </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">1</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;Good&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">2</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;Moderate&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">3</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;Unhealthy for sensitive groups&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">4</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;Unhealthy&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">5</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;Very Unhealthy&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">6</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;Hazardous&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    aq_map[aq_val] </span><span class=\"mtk7\">||</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;Unknown&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Some example usage in an irb console:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">irb -r ./app/weather_client.rb</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">irb(main):001:0&gt; WeatherClient.new.today(city: &#39;Paris&#39;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; &quot;Weather for Paris, France is 17.0 degrees. Partly cloudy. Air quality is Good&quot;</span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"1-rspec-stubbing\" style=\"position:relative;\"><a href=\"#1-rspec-stubbing\" aria-label=\"1 rspec stubbing permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. RSpec Stubbing</h2>\n<p class=\"markdown-para\">How to write a test for <code>WeatherClient</code>? Calling out to the Weather API is a side effect, and tests should not have any side effects. For example, each call uses up request quota for the API key. Even if usage were unlimited, this code is requesting the <em class=\"markdown-emphasis\">current</em> weather. This means at any given day/time, the response could be different so it will be impossible to write a test expecting a specific result. Another consideration is the Weather API could go down at the same instance when the test is run, this would cause the test to fail even though no code changes had been made on this app.</p>\n<p class=\"markdown-para\">Since the <code>today</code> method calls <code>Faraday.get</code> directly, RSpec stubbing must be used to set the returned response of the <code>Faraday.get</code> method for the test. This will prevent a real HTTP request from being sent when the test is run and instead return a canned response of our design. In order to do this, we must know what kind of object is returned by <code>Faraday.get</code>, which is a <code>Faraday::Response</code>.</p>\n<p class=\"markdown-para\">Then the code calls the <code>body</code> method of the returned <code>Faraday::Response</code> object, this contains the string content of the Weather API response. In order for this to work in a test, the stub of <code>Faraday.get</code> must return a test double, which will stand in for the <code>Faraday::Response</code> object. Then the <code>body</code> method of the test double is also stubbed to return the actual string response.</p>\n<p class=\"markdown-para\">Here is the test:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># spec/weather_client_spec.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;./app/weather_client_old&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">RSpec</span><span class=\"mtk1\">.</span><span class=\"mtk5\">describe</span><span class=\"mtk1\"> WeatherClient </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  describe </span><span class=\"mtk6\">&#39;#today&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    it </span><span class=\"mtk6\">&#39;gets current weather for a city&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># stub Faraday `get` method to avoid making a real HTTP request when test is run</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      response_dbl </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">instance_double</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;Faraday::Response&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk5\">allow</span><span class=\"mtk1\">(Faraday).</span><span class=\"mtk5\">to</span><span class=\"mtk1\"> </span><span class=\"mtk5\">receive</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:get</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk5\">with</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1/current.json&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk4\">q:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;Paris&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk4\">aqi:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;yes&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk5\">and_return</span><span class=\"mtk1\">(response_dbl)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># stub body method on response object to return a canned response for Paris weather</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk5\">allow</span><span class=\"mtk1\">(response_dbl).</span><span class=\"mtk5\">to</span><span class=\"mtk1\"> </span><span class=\"mtk5\">receive</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:body</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk5\">and_return</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;{&quot;location&quot;:{&quot;name&quot;:&quot;Paris&quot;,&quot;country&quot;:&quot;France&quot;},&quot;current&quot;:{&quot;temp_c&quot;:16.0,&quot;condition&quot;:{&quot;text&quot;:&quot;Clear&quot;},&quot;air_quality&quot;:{&quot;us-epa-index&quot;:1}}}&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      paris_weather </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> described_class.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">.</span><span class=\"mtk5\">today</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;Paris&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk5\">expect</span><span class=\"mtk1\">(paris_weather).</span><span class=\"mtk5\">to</span><span class=\"mtk1\"> </span><span class=\"mtk5\">eq</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;Weather for Paris, France is 16.0 degrees. Clear. Air quality is Good&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"problems\" style=\"position:relative;\"><a href=\"#problems\" aria-label=\"problems permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problems</h3>\n<p class=\"markdown-para\">While this works, it feels a little clunky. It requires knowing some details of Faraday like the fact that calling <code>get</code> returns a <code>Faraday::Response</code> object. If a future release of Faraday will refactor to return a different object, then this test will fail even the refactored object behaves exactly the same as in the previous version. Generally speaking, use of stubs/mocks can make a test brittle because its verifying some implementation details rather than focusing on the expected return value of a method.</p>\n<p class=\"markdown-para\">Also the double stubbing required - once for <code>Faraday.get</code> and again for the response double it returns, makes the test hard to read.</p>\n<p class=\"markdown-para\">Another issue occurs when trying to add another Weather API request. For example, in addition to the current weather <code>/current.json</code>, there's another endpoint for the future weather at <code>/forecast.json</code>. When using <code>Faraday.get</code>, each request has to repeat the base url, headers, and common parameters such as the API key, for example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">WeatherClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">today</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    response </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1/current.json&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">q:</span><span class=\"mtk1\"> city,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">aqi:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;yes&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">parse_today</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk5\">parse</span><span class=\"mtk1\">(response.</span><span class=\"mtk5\">body</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Some duplication with `today` method including base url, headers, and setting of API key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">forecast</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    response </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1/forecast.json&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                             </span><span class=\"mtk4\">q:</span><span class=\"mtk1\"> city</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                           { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># do something with response...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">private</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># snip...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"2-faraday-stubbing\" style=\"position:relative;\"><a href=\"#2-faraday-stubbing\" aria-label=\"2 faraday stubbing permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Faraday Stubbing</h2>\n<p class=\"markdown-para\">Fortunately, Faraday provides a cleaner solution for testing, which will be explained in this section. This will require some refactoring and introducing several new concepts.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"faraday-connection\" style=\"position:relative;\"><a href=\"#faraday-connection\" aria-label=\"faraday connection permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faraday Connection</h3>\n<p class=\"markdown-para\">First, to fix the issue of code duplication - that every request to the API requires repeating the base url and common parameters. Faraday provides a <code>Faraday::Connection</code> object to store common configuration. Subsequent http requests such as <code>get</code>, <code>post</code>, etc. can be made on the connection object.</p>\n<p class=\"markdown-para\">To create a connection object, call <code>Faraday.new</code>. For example, the <code>today</code> method on <code>WeatherClient</code> could be written like this:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">WeatherClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">today</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    conn </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">url:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">params:</span><span class=\"mtk1\"> { </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">] },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">headers:</span><span class=\"mtk1\"> { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    response </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> conn.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;current.json&#39;</span><span class=\"mtk1\">, { </span><span class=\"mtk4\">q:</span><span class=\"mtk1\"> city, </span><span class=\"mtk4\">aqi:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;yes&#39;</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">parse_today</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk5\">parse</span><span class=\"mtk1\">(response.</span><span class=\"mtk5\">body</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">private</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># snip...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">At this point, it doesn't seem like much of an improvement because all the common logic (base url, api key and headers) are still in the <code>today</code> method.</p>\n<p class=\"markdown-para\">The beauty of this approach comes when pulling out the connection object into the <code>initialize</code> method and making it an instance variable. Then it can be shared among multiple API methods without having to repeat the base url, api key and headers. For example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">WeatherClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">initialize</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @conn </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">url:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">params:</span><span class=\"mtk1\"> { </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">] },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">headers:</span><span class=\"mtk1\"> { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">today</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    response </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> @conn.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;current.json&#39;</span><span class=\"mtk1\">, { </span><span class=\"mtk4\">q:</span><span class=\"mtk1\"> city, </span><span class=\"mtk4\">aqi:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;yes&#39;</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">parse_today</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk5\">parse</span><span class=\"mtk1\">(response.</span><span class=\"mtk5\">body</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">future</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    response </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> @conn.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;forecast.json&#39;</span><span class=\"mtk1\">, { </span><span class=\"mtk4\">q:</span><span class=\"mtk1\"> city })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># do something with response...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">private</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># snip...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Ok so the code duplication issue has been solved with use of an instance <code>Faraday::Connection</code> object, but how does this help with testing?</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"faraday-test-adapter\" style=\"position:relative;\"><a href=\"#faraday-test-adapter\" aria-label=\"faraday test adapter permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faraday Test Adapter</h3>\n<p class=\"markdown-para\">Faraday comes with a built-in test adapter for defining stubbed HTTP requests to mock out network services. A <code>Faraday::Connection</code> object can then be instantiated using the test adapter. For example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Test adapter</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">stubs </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Adapter</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Test</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Stubs</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Instantiate a connection that uses the test adapter</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conn </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\"> { |b| b.</span><span class=\"mtk5\">adapter</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:test</span><span class=\"mtk1\">, stubs) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Define any number of mock network requests on the test adapter, which yields an array of three elements:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   1. HTTP response code</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   2. Hash of HTTP response headers</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   3. String of HTTP response body</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">stubs.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;/some-endpoint&#39;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">200</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    { </span><span class=\"mtk6\">&#39;Content-Type&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk6\">&#39;{&quot;name&quot;: &quot;some canned response for testing&quot;}&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">If the stubbed connection object <code>conn</code> gets used to make an HTTP request that matches what is stubbed, then the HTTP response code will be 200 and the response body will be the canned response. No real network request to <code>/some-endpoint</code> will be made. For example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">resp </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> conn.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;/some-endpoint&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">resp.</span><span class=\"mtk5\">status</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># 200</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">resp.</span><span class=\"mtk5\">headers</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># { &#39;Content-Type&#39;: &#39;application/json&#39; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">resp.</span><span class=\"mtk5\">body</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># &#39;{&quot;name&quot;: &quot;some canned response for testing&quot;}&#39;</span></span></span></code></pre>\n<p class=\"markdown-para\">So the next question is - how to make <code>WeatherClient</code> use this stubbed connection object instead of a real connection object when running tests? This leads to the last and final concept that will tie this all together.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"dependency-injection\" style=\"position:relative;\"><a href=\"#dependency-injection\" aria-label=\"dependency injection permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection</h3>\n<p class=\"markdown-para\">Dependency injection will allow us to \"inject\" a stubbed Faraday connection into <code>WeatherClient</code> for testing purposes. But first, what is dependency injection? According to <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" class=\"markdown-link\">Wikipedia</a>:</p>\n<blockquote class=\"markdown-blockquote\">\n<p class=\"markdown-para\">In software engineering, dependency injection is a technique in which an object receives other objects that it depends on, called dependencies. Typically, the receiving object is called a client and the passed-in ('injected') object is called a service. The code that passes the service to the client is called the injector. Instead of the client specifying which service it will use, the injector tells the client what service to use. The 'injection' refers to the passing of a dependency (a service) into the client that uses it.</p>\n</blockquote>\n<p class=\"markdown-para\">In this example, <code>WeatherClient</code> is the \"receiving object\", and the \"service\" we want to pass in is a <code>Faraday::Connection</code>. The problem with the current implementation of <code>WeatherClient</code> is that the initializer <em class=\"markdown-emphasis\">always</em> instantiates a new instance of <code>Faraday::Connection</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">WeatherClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">initialize</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># always constructs a new Faraday::Connection object</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @conn </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">url:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">params:</span><span class=\"mtk1\"> { </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">] },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">headers:</span><span class=\"mtk1\"> { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># snip...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">To make <code>WeatherClient</code> support injecting a connection object, the <code>initialize</code> method is modified to optionally accept a <code>conn</code> parameter, and either use the provided parameter, or if not specified, instantiate a new Faraday connection object:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">WeatherClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Make Faraday connection injectable for easier testing.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">initialize</span><span class=\"mtk1\">(</span><span class=\"mtk10 mtki\">conn</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nil</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @conn </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> conn </span><span class=\"mtk7\">||</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">url:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;https://api.weatherapi.com/v1&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">params:</span><span class=\"mtk1\"> { </span><span class=\"mtk4\">key:</span><span class=\"mtk1\"> ENV[</span><span class=\"mtk6\">&#39;WEATHER_API_KEY&#39;</span><span class=\"mtk1\">] },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">headers:</span><span class=\"mtk1\"> { </span><span class=\"mtk6\">&#39;Accept&#39;</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># snip...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">And finally, a test can be written against this version of <code>WeatherClient</code>, initializing it with a stubbed <code>Faraday::Connection</code> to avoid making real HTTP requests:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">require</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;./app/weather_client&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">RSpec</span><span class=\"mtk1\">.</span><span class=\"mtk5\">describe</span><span class=\"mtk1\"> WeatherClient </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Faraday test adapter</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">let</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:stubs</span><span class=\"mtk1\">) { </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Adapter</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Test</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Stubs</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Faraday::Connection object that uses the test adapter</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">let</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:conn</span><span class=\"mtk1\">) { </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\"> { |b| b.</span><span class=\"mtk5\">adapter</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:test</span><span class=\"mtk1\">, stubs) } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># WeatherClient with the stubbed connection object injected</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">let</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:client</span><span class=\"mtk1\">) { described_class.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(conn) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Clear default connection to prevent it from being cached between different tests.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># This allows for each test to have its own set of stubs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  after </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">Faraday</span><span class=\"mtk1\">.</span><span class=\"mtk5\">default_connection</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nil</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  describe </span><span class=\"mtk6\">&#39;#today&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    it </span><span class=\"mtk6\">&#39;gets current weather for a city&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># Block yields an array with 3 items:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">#   1. HTTP response code</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">#   2. Hash of headers</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">#   3. String response body</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      stubs.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;current.json&#39;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk4\">200</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          { </span><span class=\"mtk6\">&#39;Content-Type&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&#39;application/json&#39;</span><span class=\"mtk1\"> },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk6\">&#39;{&quot;location&quot;:{&quot;name&quot;:&quot;Paris&quot;,&quot;country&quot;:&quot;France&quot;},&quot;current&quot;:{&quot;temp_c&quot;:16.0,&quot;condition&quot;:{&quot;text&quot;:&quot;Clear&quot;},&quot;air_quality&quot;:{&quot;us-epa-index&quot;:1}}}&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      paris_weather </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> client.</span><span class=\"mtk5\">today</span><span class=\"mtk1\">(</span><span class=\"mtk4\">city:</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&#39;Paris&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk5\">expect</span><span class=\"mtk1\">(paris_weather).</span><span class=\"mtk5\">to</span><span class=\"mtk1\"> </span><span class=\"mtk5\">eq</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;Weather for Paris, France is 16.0 degrees. Clear. Air quality is Good&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># Verify every stubbed method that was defined on test adapter actually got called when code was exercised</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      stubs.</span><span class=\"mtk5\">verify_stubbed_calls</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"which-approach-to-use\" style=\"position:relative;\"><a href=\"#which-approach-to-use\" aria-label=\"which approach to use permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Which Approach to Use?</h2>\n<p class=\"markdown-para\">My preference is to use the built-in Faraday test adapter whenever possible because it results in cleaner looking tests and is officially supported by the library. However, as with most technical decisions, the correct answer is, it depends.</p>\n<p class=\"markdown-para\">If you're fortunate to be green fielding a project, or at the very least, the client class that will be making HTTP requests, then go ahead and design the class with dependency injection and use the built-in Faraday test adapter.</p>\n<p class=\"markdown-para\">If on the other hand, you're dealing with legacy code that uses the Faraday class helper methods such as <code>Faraday.get</code>, <code>Faraday.post</code>, then the safest solution may be to use regular RSpec stubbing. The exception to this would be if the project has really solid end-to-end test coverage, then you could consider refactoring some of the legacy code that uses Faraday to make it easier to test.</p>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">This post has covered two different ways of using and testing Faraday for making HTTP requests to an external service. The first approach is to use Faraday's class helper methods, and test with regular RSpec stubbing. Although this works, it can lead to brittle, difficult to read tests, but may be the safest option when dealing with legacy code. The second approach is to design the client class with dependency injection, then use Faraday's built-in test adapter to inject a stubbed connection into the class for testing. This results in cleaner, easier to read tests.</p>\n<p class=\"markdown-para\">All the code used in this post can be found on <a href=\"https://github.com/danielabar/ruby-weather\" class=\"markdown-link\">Github</a>.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk12 { color: #CFCFC2; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk10 { color: #FD971F; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":9,"tableOfContents":"<ul>\n<li>\n<p><a href=\"#setup\">Setup</a></p>\n</li>\n<li>\n<p><a href=\"#1-rspec-stubbing\">1. RSpec Stubbing</a></p>\n<ul>\n<li><a href=\"#problems\">Problems</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-faraday-stubbing\">2. Faraday Stubbing</a></p>\n<ul>\n<li><a href=\"#faraday-connection\">Faraday Connection</a></li>\n<li><a href=\"#faraday-test-adapter\">Faraday Test Adapter</a></li>\n<li><a href=\"#dependency-injection\">Dependency Injection</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#which-approach-to-use\">Which Approach to Use?</a></p>\n</li>\n<li>\n<p><a href=\"#conclusion\">Conclusion</a></p>\n</li>\n</ul>","frontmatter":{"title":"Testing Faraday with RSpec","date":"14 Aug 2021","description":"Learn two different techniques for testing code that uses Faraday with RSpec.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/69f6b56407e655dd690ba4b363161733/d730f/faraday-alex-kondratiev-H9t723yPjYI-unsplash.jpg","srcSet":"/static/69f6b56407e655dd690ba4b363161733/b834a/faraday-alex-kondratiev-H9t723yPjYI-unsplash.jpg 225w,\n/static/69f6b56407e655dd690ba4b363161733/21c52/faraday-alex-kondratiev-H9t723yPjYI-unsplash.jpg 450w,\n/static/69f6b56407e655dd690ba4b363161733/d730f/faraday-alex-kondratiev-H9t723yPjYI-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/69f6b56407e655dd690ba4b363161733/71a10/faraday-alex-kondratiev-H9t723yPjYI-unsplash.webp 225w,\n/static/69f6b56407e655dd690ba4b363161733/901f1/faraday-alex-kondratiev-H9t723yPjYI-unsplash.webp 450w,\n/static/69f6b56407e655dd690ba4b363161733/5acd1/faraday-alex-kondratiev-H9t723yPjYI-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":599}}}},"fields":{"slug":"/blog/testing-faraday-with-rspec/"}},"relatedP":{"edges":[{"node":{"id":"f782f0c1-28a3-59fe-932d-d741ee604f5b","frontmatter":{"title":"Debug Github Actions","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#081808","images":{"fallback":{"src":"/static/bc9cf9fe62735cdf137667e63704ac8c/26528/computer-bug.jpg","srcSet":"/static/bc9cf9fe62735cdf137667e63704ac8c/26528/computer-bug.jpg 300w,\n/static/bc9cf9fe62735cdf137667e63704ac8c/43429/computer-bug.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/bc9cf9fe62735cdf137667e63704ac8c/5d6c3/computer-bug.webp 300w,\n/static/bc9cf9fe62735cdf137667e63704ac8c/68dbc/computer-bug.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/debug-github-action/"}}},{"node":{"id":"df308377-3f0e-5aae-8cce-4e9377304daa","frontmatter":{"title":"Solving a Python Interview Question in Ruby","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/41cac534f5048f26531ee516516637b1/26528/python-interview-question.jpg","srcSet":"/static/41cac534f5048f26531ee516516637b1/26528/python-interview-question.jpg 300w,\n/static/41cac534f5048f26531ee516516637b1/43429/python-interview-question.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/41cac534f5048f26531ee516516637b1/5d6c3/python-interview-question.webp 300w,\n/static/41cac534f5048f26531ee516516637b1/68dbc/python-interview-question.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/python-interview-question-in-ruby/"}}},{"node":{"id":"05e58406-96e0-5834-a969-f60a98704666","frontmatter":{"title":"Start a Rails 6 Project with RSpec","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#283848","images":{"fallback":{"src":"/static/36121c07924fc545e6336936bc7765a0/26528/scaffold-rails-jack-b-S3SU988T13A-unsplash.jpg","srcSet":"/static/36121c07924fc545e6336936bc7765a0/26528/scaffold-rails-jack-b-S3SU988T13A-unsplash.jpg 300w,\n/static/36121c07924fc545e6336936bc7765a0/43429/scaffold-rails-jack-b-S3SU988T13A-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/36121c07924fc545e6336936bc7765a0/5d6c3/scaffold-rails-jack-b-S3SU988T13A-unsplash.webp 300w,\n/static/36121c07924fc545e6336936bc7765a0/68dbc/scaffold-rails-jack-b-S3SU988T13A-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/start-rails-6-project-with-rspec/"}}}]}},"pageContext":{"slug":"/blog/testing-faraday-with-rspec/","relatedPosts":["Solving a Python Interview Question in Ruby","Debug Github Actions","Start a Rails 6 Project with RSpec"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}