{"componentChunkName":"component---src-templates-post-js","path":"/blog/rails-cache-elegance/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">I was recently reviewing a pull request (PR) for a Rails project that was introducing Rails caching. Specifically, low-level caching for results of a known slow operation that needed to be called frequently. The initial code looked like the typical caching implementation I've seen in other languages: <code>read</code> from the cache, if the value is already there, use it, if not, call the slow operation, <code>write</code> the results to the cache, then use the results.</p>\n<p class=\"markdown-para\">However, a read through the <a href=\"https://guides.rubyonrails.org/caching_with_rails.html\" class=\"markdown-link\">Rails Guides on Caching</a> revealed a more elegant way of doing this. There's a <code>fetch</code> method that allows you to retrieve data from the cache, and provide an optional block to handle populating the cache if the value isn't there. Let's see how this works.</p>\n<h2 class=\"markdown-subtitle\" id=\"read--write\" style=\"position:relative;\"><a href=\"#read--write\" aria-label=\"read  write permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Read &#x26; Write</h2>\n<p class=\"markdown-para\">Suppose the <code>Product</code> model has a method to retrieve prices from competitors sites so that it can compare if its own price is better. The call to find the competitors prices makes some external API requests, so its slow. In the example below, it's simulated with a <code>sleep(3)</code>, i.e. sleep for 3 seconds before returning some hard-coded results, for this simple demo:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># app/models/product.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">Product</span><span class=\"mtk5 mtki mtku\"> &lt; ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  validates </span><span class=\"mtk4\">:name</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:description</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:price</span><span class=\"mtk1\">, </span><span class=\"mtk4\">presence:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Calls slow operation `find_competing_prices` every time</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">better_than_competition?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    competitors_prices </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> find_competing_prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    competitors_prices.</span><span class=\"mtk5\">all?</span><span class=\"mtk1\"> { |_, competitor_price| price </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> competitor_price }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Here we simulate a slow operation with `sleep(3)`.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># In a real app, this would be in a service that&#39;s responsible</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># for making an external API call and returning the result.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">find_competing_prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    logger.</span><span class=\"mtk5\">info</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;Looking up competing prices for product </span><span class=\"mtk7\">#{</span><span class=\"mtk1\">id</span><span class=\"mtk7\">}</span><span class=\"mtk6\">...&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">sleep</span><span class=\"mtk1\">(</span><span class=\"mtk4\">3</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">competitor_a:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">29.99</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">competitor_b:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">31.49</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">competitor_c:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">29.55</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Now let's introduce caching for the results of the slow operation <code>find_competing_prices</code>. Using a typical approach, which is to make calls to first <code>read</code> from the cache, and then <code>write</code> to the cache if the value isn't already cached. The <code>cache_key</code> method will be explained shortly.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># app/models/product.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">Product</span><span class=\"mtk5 mtki mtku\"> &lt; ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  validates </span><span class=\"mtk4\">:name</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:description</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:price</span><span class=\"mtk1\">, </span><span class=\"mtk4\">presence:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">better_than_competition?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Check if the competing prices for this product have already been cached</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    competitors_prices </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.</span><span class=\"mtk5\">cache</span><span class=\"mtk1\">.</span><span class=\"mtk5\">read</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;</span><span class=\"mtk7\">#{</span><span class=\"mtk1\">cache_key</span><span class=\"mtk7\">}</span><span class=\"mtk6\">/competing_prices&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># If not, call the slow operation, and then save results to cache</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> competitors_prices.</span><span class=\"mtk5\">blank?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      competitors_prices </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> find_competing_prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.</span><span class=\"mtk5\">cache</span><span class=\"mtk1\">.</span><span class=\"mtk5\">write</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;</span><span class=\"mtk7\">#{</span><span class=\"mtk1\">cache_key</span><span class=\"mtk7\">}</span><span class=\"mtk6\">/competing_prices&quot;</span><span class=\"mtk1\">, competitors_prices)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Now we can use the results, whether from cache, or just retrieved</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    competitors_prices.</span><span class=\"mtk5\">all?</span><span class=\"mtk1\"> { |_, competitor_price| price </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> competitor_price }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Slow operation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">find_competing_prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">The above code works, but Rails provides a more elegant method to handle caching.</p>\n<h2 class=\"markdown-subtitle\" id=\"cache-fetch\" style=\"position:relative;\"><a href=\"#cache-fetch\" aria-label=\"cache fetch permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache Fetch</h2>\n<p class=\"markdown-para\">In addition to <code>read</code> and <code>write</code> methods, Rails provides a <code>fetch</code> method on the cache. Here's how it works:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">result </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.</span><span class=\"mtk5\">cache</span><span class=\"mtk1\">.</span><span class=\"mtk5\">fetch</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&#39;my_key&#39;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  expensive_data_fetching_method</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">The <code>fetch</code> method first checks if <code>my_key</code> is in the cache. If it's not, it automatically executes the block provided, which is the <code>expensive_data_fetching_method</code> in the above example. The result is then stored in the cache under the <code>my_key</code> key. If <code>my_key</code> is already in the cache, then <code>fetch</code> simply returns the cached result, making it an elegant way to handle caching in Rails.</p>\n<p class=\"markdown-para\">Let's update the <code>better_than_competition?</code> method in the <code>Product</code> model to use <code>fetch</code> rather than making separate calls to <code>read</code> and <code>write</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># app/models/product.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">Product</span><span class=\"mtk5 mtki mtku\"> &lt; ApplicationRecord</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  validates </span><span class=\"mtk4\">:name</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:description</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:price</span><span class=\"mtk1\">, </span><span class=\"mtk4\">presence:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">better_than_competition?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Read from or write to cache</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    competitors_prices </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.</span><span class=\"mtk5\">cache</span><span class=\"mtk1\">.</span><span class=\"mtk5\">fetch</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;</span><span class=\"mtk7\">#{</span><span class=\"mtk1\">cache_key</span><span class=\"mtk7\">}</span><span class=\"mtk6\">/competing_prices&quot;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      find_competing_prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    competitors_prices.</span><span class=\"mtk5\">all?</span><span class=\"mtk1\"> { |_, competitor_price| price </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> competitor_price }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Slow operation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">find_competing_prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"cache-keys\" style=\"position:relative;\"><a href=\"#cache-keys\" aria-label=\"cache keys permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache Keys</h2>\n<p class=\"markdown-para\">Another nice feature that Rails provides is automatic construction of the cache keys for models. All the previous examples referenced a <code>cache_key</code> method, for example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># In any model method</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.</span><span class=\"mtk5\">cache</span><span class=\"mtk1\">.</span><span class=\"mtk5\">fetch</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;</span><span class=\"mtk7\">#{</span><span class=\"mtk1\">cache_key</span><span class=\"mtk7\">}</span><span class=\"mtk6\">/competing_prices&quot;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p class=\"markdown-para\">But we didn't have to define <code>cache_key</code> in the model class. The <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Integration.html#method-i-cache_key\" class=\"markdown-link\">cache_key</a> method is part of ActiveRecord. It returns a concatenation of the model name and its primary key. We can explore this in the Rails console <code>bin/rails c</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">product </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Product</span><span class=\"mtk1\">.</span><span class=\"mtk5\">first</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; </span><span class=\"mtk3\">#&lt;Product:0x00000001080c9618 id: 1, name: &quot;whatever&quot;...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">product.</span><span class=\"mtk5\">cache_key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; </span><span class=\"mtk6\">&quot;products/1&quot;</span></span></span></code></pre>\n<p class=\"markdown-para\">So when any caching code runs such as:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># In any instance method in Product class</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.</span><span class=\"mtk5\">cache</span><span class=\"mtk1\">.</span><span class=\"mtk5\">fetch</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;</span><span class=\"mtk7\">#{</span><span class=\"mtk1\">cache_key</span><span class=\"mtk7\">}</span><span class=\"mtk6\">/competing_prices&quot;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p class=\"markdown-para\">What its doing is looking in the cache for a key like <code>products/1/competing_prices</code>.</p>\n<h2 class=\"markdown-subtitle\" id=\"cache-invalidation\" style=\"position:relative;\"><a href=\"#cache-invalidation\" aria-label=\"cache invalidation permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache Invalidation</h2>\n<p class=\"markdown-para\">You've probably heard that cache invalidation is one of the hard things in computer science (<a href=\"https://www.martinfowler.com/bliki/TwoHardThings.html\" class=\"markdown-link\">jokes</a>). Rails can help with this problem. In addition to the <code>cache_key</code> method, it also provides the <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Integration.html#method-i-cache_key_with_version\" class=\"markdown-link\">cache_key_with_version</a> method, which incorporates the model's <code>updated_at</code> timestamp.</p>\n<p class=\"markdown-para\">Let's see how this works in the Rails console:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">Product</span><span class=\"mtk1\">.</span><span class=\"mtk9\">select</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:id</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:name</span><span class=\"mtk1\">, </span><span class=\"mtk4\">:updated_at</span><span class=\"mtk1\">).</span><span class=\"mtk5\">first</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; </span><span class=\"mtk3\">#&lt;Product:0x0000000113bb3848 id: 6, name: &quot;whatever&quot;, updated_at: Sun, 12 Nov 2023 16:35:53.983721000 UTC +00:00&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Notice this incorporates both the product id and updated_at timestamp</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">product.</span><span class=\"mtk5\">cache_key_with_version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; </span><span class=\"mtk6\">&quot;products/6-20231112163553983721&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Updating the price also updates the model&#39;s `updated_at`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">product.</span><span class=\"mtk5\">update!</span><span class=\"mtk1\">(</span><span class=\"mtk4\">price:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">32.99</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Now we have a different cache key because updated_at has changed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">product.</span><span class=\"mtk5\">updated_at</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; Tue, </span><span class=\"mtk4\">04</span><span class=\"mtk1\"> Jun </span><span class=\"mtk4\">2024</span><span class=\"mtk1\"> </span><span class=\"mtk4\">12</span><span class=\"mtk1\">:</span><span class=\"mtk4\">00</span><span class=\"mtk1\">:</span><span class=\"mtk4\">49.561587000</span><span class=\"mtk1\"> UTC </span><span class=\"mtk7\">+</span><span class=\"mtk4\">00</span><span class=\"mtk1\">:</span><span class=\"mtk4\">00</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">product.</span><span class=\"mtk5\">cache_key_with_version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=&gt; </span><span class=\"mtk6\">&quot;products/6-20240604120049561587&quot;</span></span></span></code></pre>\n<p class=\"markdown-para\">This is useful if you need the cache to be populated with fresh data, anytime a model gets updated, then looked up in the cache again. In this case, our caching could be updated to use the <code>cache_key_with_version</code> method instead of <code>cache_key</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">better_than_competition?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Read from or write to cache using a timestamped key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># If the product has been updated since the last time it was cached,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># this will be considered a cache miss and a new entry will be</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># populated in the cache.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  competitors_prices </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Rails</span><span class=\"mtk1\">.</span><span class=\"mtk5\">cache</span><span class=\"mtk1\">.</span><span class=\"mtk5\">fetch</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;</span><span class=\"mtk7\">#{</span><span class=\"mtk1\">cache_key_with_version</span><span class=\"mtk7\">}</span><span class=\"mtk6\">/competing_prices&quot;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    find_competing_prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  competitors_prices.</span><span class=\"mtk5\">all?</span><span class=\"mtk1\"> { |_, competitor_price| price </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> competitor_price }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nThis is not to suggest that the problem of cache invalidation is completely solved. This is a very large topic that's outside the scope of this post. While the \"cache_key_with_version\" method in Rails can assist with constructing cache keys and incorporating model versioning through \"updated_at\", cache invalidation remains a nuanced challenge and this may not cover every use case.\n</aside>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">The Rails cache <code>fetch</code> method and automatic cache key construction are just a few examples of the many developer niceties that Rails offers. It's thoughtful details such as these that make Rails a go-to choice for web developers looking to be productive and enjoy their work. For those who regard this as too much \"magic\", there's always the classic <code>read</code> and <code>write</code> methods. You can also define your own cache key/version methods if you need different behaviour than what Rails provides. See the <a href=\"https://guides.rubyonrails.org/caching_with_rails.html\" class=\"markdown-link\">Rails Guides: Caching</a> and the <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Integration.html#method-i-cache_key\" class=\"markdown-link\">API Docs</a> for more details.</p>\n<p class=\"markdown-para\">If you'd like to explore the code examples in this post, they are available on <a href=\"https://github.com/danielabar/cache-demo\" class=\"markdown-link\">GitHub</a>. Feel free to check out the repository and try out the examples for product caching.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":5,"tableOfContents":"<ul>\n<li><a href=\"#read--write\">Read &#x26; Write</a></li>\n<li><a href=\"#cache-fetch\">Cache Fetch</a></li>\n<li><a href=\"#cache-keys\">Cache Keys</a></li>\n<li><a href=\"#cache-invalidation\">Cache Invalidation</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Some Elegance with Rails Caching","date":"01 Jun 2024","description":"Explore the elegance of Rails caching using the 'fetch' method to optimize performance and easily handle slow operations.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/841a5221ee299471977ce391a607c5f0/d730f/rails-cache-elegance-frankie-lopez-hKSJiRZ-ngk-unsplash.jpg","srcSet":"/static/841a5221ee299471977ce391a607c5f0/b834a/rails-cache-elegance-frankie-lopez-hKSJiRZ-ngk-unsplash.jpg 225w,\n/static/841a5221ee299471977ce391a607c5f0/2e19b/rails-cache-elegance-frankie-lopez-hKSJiRZ-ngk-unsplash.jpg 450w,\n/static/841a5221ee299471977ce391a607c5f0/d730f/rails-cache-elegance-frankie-lopez-hKSJiRZ-ngk-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/841a5221ee299471977ce391a607c5f0/71a10/rails-cache-elegance-frankie-lopez-hKSJiRZ-ngk-unsplash.webp 225w,\n/static/841a5221ee299471977ce391a607c5f0/55ac6/rails-cache-elegance-frankie-lopez-hKSJiRZ-ngk-unsplash.webp 450w,\n/static/841a5221ee299471977ce391a607c5f0/5acd1/rails-cache-elegance-frankie-lopez-hKSJiRZ-ngk-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":599}}}},"fields":{"slug":"/blog/rails-cache-elegance/"}},"relatedP":{"edges":[{"node":{"id":"293007de-2893-542c-9cdc-9f1acfacf3cf","frontmatter":{"title":"A VS Code Alternative to Postman","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#e8c8b8","images":{"fallback":{"src":"/static/d0406fcdb0150724906ee53f75ac1568/26528/rest-aaron-burden-2bg1jPty490-unsplash.jpg","srcSet":"/static/d0406fcdb0150724906ee53f75ac1568/26528/rest-aaron-burden-2bg1jPty490-unsplash.jpg 300w,\n/static/d0406fcdb0150724906ee53f75ac1568/43429/rest-aaron-burden-2bg1jPty490-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/d0406fcdb0150724906ee53f75ac1568/5d6c3/rest-aaron-burden-2bg1jPty490-unsplash.webp 300w,\n/static/d0406fcdb0150724906ee53f75ac1568/68dbc/rest-aaron-burden-2bg1jPty490-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/postman-alternative-vscode/"}}},{"node":{"id":"fff6ecc2-0dbb-59b1-80bb-97c0c24f82dd","frontmatter":{"title":"They Don't All Have To Be ActiveRecord Models","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#182828","images":{"fallback":{"src":"/static/f09c57681d2f9326aa60bbeee916a2c4/26528/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.jpg","srcSet":"/static/f09c57681d2f9326aa60bbeee916a2c4/26528/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.jpg 300w,\n/static/f09c57681d2f9326aa60bbeee916a2c4/43429/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/f09c57681d2f9326aa60bbeee916a2c4/5d6c3/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.webp 300w,\n/static/f09c57681d2f9326aa60bbeee916a2c4/68dbc/not-ar-model-vandan-patel-C63NHsUUR1A-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/they-dont-all-have-to-be-activerecord-models/"}}},{"node":{"id":"d84ac79f-d860-544a-8abb-63add1da9214","frontmatter":{"title":"Understanding ActiveRecord Dependent Options","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#282828","images":{"fallback":{"src":"/static/b7f7064c193fa4dc20f20d253e1928fa/26528/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.jpg","srcSet":"/static/b7f7064c193fa4dc20f20d253e1928fa/26528/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.jpg 300w,\n/static/b7f7064c193fa4dc20f20d253e1928fa/43429/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/b7f7064c193fa4dc20f20d253e1928fa/5d6c3/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.webp 300w,\n/static/b7f7064c193fa4dc20f20d253e1928fa/68dbc/activerecord-dep-gary-chan-YzSZN3qvHeo-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/activerecord-dependent-options/"}}}]}},"pageContext":{"slug":"/blog/rails-cache-elegance/","relatedPosts":["Understanding ActiveRecord Dependent Options","A VS Code Alternative to Postman","They Don't All Have To Be ActiveRecord Models"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}