{"componentChunkName":"component---src-templates-post-js","path":"/blog/nomad-tips-and-tricks/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">I've been working on a platform migration project to containerize and move several web applications and associated services from a home grown system to Hashicorp's <a href=\"https://www.nomadproject.io/\" class=\"markdown-link\">Nomad</a>. Nomad is a workload orchestration tool designed to make it (relatively) easy to deploy, manage and scale containers on private and public clouds. It's <a href=\"https://www.nomadproject.io/docs/nomad-vs-kubernetes\" class=\"markdown-link\">comparable</a> to Kubernetes, but focuses on a smaller scope, delegating features including discovery and secrets management to other tools such as <a href=\"https://www.consul.io/\" class=\"markdown-link\">Consul</a> and <a href=\"https://www.vaultproject.io/\" class=\"markdown-link\">Vault</a>, while providing integration with these. It's also newer than Kubernetes.</p>\n<p class=\"markdown-para\">One of the challenges in working with a newer platform is a smaller community, and finding online help. Many of my web searches lead to the official Nomad docs. While they are well written, if I'm doing a search, it's because I couldn't find the solution the docs. In the spirit of increasing the body of online knowledge, this post will share a few tips and tricks I've picked up going through this migration.</p>\n<aside class=\"markdown-aside\">\nThis post assumes some working knowledge of Hashicorp's Nomad. If you haven't used it before, checkout this excellent <a class=\"markdown-link\" href=\"https://adri-v.medium.com/just-in-time-nomad-80f57cd403ca\">primer</a> and <a class=\"markdown-link\" href=\"https://adri-v.medium.com/just-in-time-nomad-running-traefik-on-hashiqube-7d6dfd8ef9d8\">tutorial</a>.\n</aside>\n<h2 class=\"markdown-subtitle\" id=\"job-specification\" style=\"position:relative;\"><a href=\"#job-specification\" aria-label=\"job specification permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Job Specification</h2>\n<p class=\"markdown-para\">The first set of tips are for working with the job specification file (aka jobspec). This is a declarative way of telling Nomad about your application and its resource requirements. The jobspec file is written in <a href=\"https://github.com/hashicorp/hcl\" class=\"markdown-link\">HCL</a>, which stands for Hashicorp Configuration Language.</p>\n<p class=\"markdown-para\">Although it can be irritating when tools require learning a framework-specific (i.e. non portable) language, HCL is similar enough to JSON and YAML that anyone familiar with these will pick it up easily. In fact, if JSON and YAML had a baby it might look something like HCL.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"increase-docker-pull-timeout\" style=\"position:relative;\"><a href=\"#increase-docker-pull-timeout\" aria-label=\"increase docker pull timeout permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Increase Docker Pull Timeout</h3>\n<p class=\"markdown-para\">When using the <a href=\"https://www.nomadproject.io/docs/drivers/docker\" class=\"markdown-link\">Docker driver</a> to run a task, the Nomad client on which the task is running will first pull the Docker image from the specified location. This can be from Docker Hub, Github Container Registry, or a private Docker registry. For example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;webapp&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">But what happens if there's a networking issue resulting in a longer than usual amount of time to pull the image? In this case, Nomad will timeout the docker pull after 5 minutes and restart according to the <code>restart</code> stanza. If the networking issues are not resolved, the job will eventually fail.</p>\n<p class=\"markdown-para\">To avoid having the job fail when docker pull is taking longer than usual, use the <code>image_pull_timeout</code> property of the docker <code>config</code> stanza to override Nomad's default timeout. For example, to increase it to 10 minutes:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image_pull_timeout</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;10m&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"reuse-docker-tag-for-development\" style=\"position:relative;\"><a href=\"#reuse-docker-tag-for-development\" aria-label=\"reuse docker tag for development permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reuse Docker Tag for Development</h3>\n<p class=\"markdown-para\">When using Docker to run a Nomad task, the Nomad client will use a cached image if the image:tag specified in the docker driver config stanza of the jobspec has already been pulled. However, during development, you may be making changes to a dev version of the Docker image and re-using the same tag.</p>\n<p class=\"markdown-para\">For example when developing a new feature, I'll switch to a git feature branch on my laptop, build an image tagged with the feature branch name, push it to the container registry, and deploy it to the Nomad dev environment (we use multiple <a href=\"https://learn.hashicorp.com/tutorials/nomad/namespaces\" class=\"markdown-link\">namespaces</a> to isolate dev, staging, and production environments). In this case, I don't want Nomad to use the cached image from my last deploy, but to always pull a \"fresh\" version of the image. This can be accomplished using <code>force_pull</code> as shown below:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:my-feature&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">force_pull</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"always-deploy-a-new-job-version\" style=\"position:relative;\"><a href=\"#always-deploy-a-new-job-version\" aria-label=\"always deploy a new job version permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Always deploy a new job version</h3>\n<p class=\"markdown-para\">The command to deploy a new version of a job is <code>nomad job run path/to/nomad/jobspec</code>. However, if nothing has changed in the jobspec file since the last deploy, then Nomad will not take any action. This is fine for production where there will be a new Docker image tag (we use the main line git commit sha) for each deploy, which effectively changes the contents of the Nomad file, thus triggering a new deploy.</p>\n<p class=\"markdown-para\">But for development, we use the same image tag (branch name) so Nomad thinks nothing has changed, even if the image has been updated. Even the <code>force_pull</code> explained in the previous section won't help because Nomad won't get as far as evaluating the jobspec file.</p>\n<p class=\"markdown-para\">To force Nomad to always run a deploy, use a <a href=\"https://www.nomadproject.io/docs/job-specification/meta\" class=\"markdown-link\">meta</a> stanza that is populated with the return value from a uuid function that always generates a unique value. The <code>meta</code> stanza allow user-defined arbitrary key-value pairs. Nomad is written in Golang and so Go functions such as <code>uuidv4()</code> can be interpolated in the Nomad file as shown below. The <code>meta</code> stanza should be placed directly in the <code>job</code> stanza:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">meta</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">run_uuid</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk7\">${</span><span class=\"mtk5\">uuidv4</span><span class=\"mtk1\">()</span><span class=\"mtk7\">}</span><span class=\"mtk6\">&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"resiliency\" style=\"position:relative;\"><a href=\"#resiliency\" aria-label=\"resiliency permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resiliency</h3>\n<p class=\"markdown-para\">This one is not so much a tip, rather a summary of important stanzas in the jobspec file. One of the many benefits of using an orchestration tool like Nomad is it can handle updates and failures gracefully without manual intervention. In order to take advantage of these features, you must understand and make use of the following stanzas in the job spec file.</p>\n<p class=\"markdown-para\"><a href=\"https://www.nomadproject.io/docs/job-specification/update\" class=\"markdown-link\">update</a> Specifies update strategy Nomad uses when deploying a new version of the task group. i.e. when <code>nomad job run path/to/jobspec</code> is run. For example, perform rolling updates 3 at a time and wait until all tasks for an allocation are running and their Consul health checks are passing for at least 10 seconds before considering the allocation healthy.</p>\n<p class=\"markdown-para\"><a href=\"https://www.nomadproject.io/docs/job-specification/restart\" class=\"markdown-link\">restart</a> Specifies strategy for Nomad to restart failed tasks on the same nomad client. For example, if the application server has crashed, attempt 2 restarts within 30 minutes, delay 15s between each restart, and don't try anymore restarts after those are exhausted.</p>\n<p class=\"markdown-para\"><a href=\"https://www.nomadproject.io/docs/job-specification/check_restart\" class=\"markdown-link\">check_restart</a> Specifies how Nomad should restart a task that is not yet failing, but has become unresponsive or otherwise unhealthy. Works together with Consul health checks. Nomad restarts tasks when a health check has failed. For example, restart the Redis task after its health check has failed 3 consecutive times, and wait 90 seconds after restarting the task to resume health checking.</p>\n<p class=\"markdown-para\"><a href=\"https://www.nomadproject.io/docs/job-specification/reschedule\" class=\"markdown-link\">reschedule</a> This handles the case where the specified number of restarts have been attempted and the task still isn't running. This suggests the issue could be with the Nomad client such as a hardware failure or kernel deadlock. The <code>reschedule</code> stanza is used to specify details for rescheduling a failing task to another nomad client. For example, reschedule the task group an unlimited number of times and increase the delay between subsequent attempts exponentially, with a starting delay of 30 seconds up to a maximum of 1 hour.</p>\n<p class=\"markdown-para\"><a href=\"https://www.nomadproject.io/docs/job-specification/migrate\" class=\"markdown-link\">migrate</a> When a Nomad client needs to come out of service, it gets marked for draining and tasks will no longer be scheduled on it. Then Nomad will migrate all existing jobs to other clients. The <code>migrate</code> stanza specifies the strategy for migrating tasks off of draining nodes. For example, migrate one allocation at a time, and mark migrated allocations healthy once all their tasks are running and associated health checks are passing for 10 seconds or more within a 5 minute deadline.</p>\n<p class=\"markdown-para\">For further details on how these stanzas are used with examples, I recommend these blog posts from Hashicorp's site:</p>\n<ul class=\"markdown-list-unordered\">\n<li class=\"markdown-list-item\"><a href=\"https://www.hashicorp.com/blog/resilient-infrastructure-with-nomad-restarting-tasks\" class=\"markdown-link\">Building Resilient Infrastructure: Restarting Tasks</a></li>\n<li class=\"markdown-list-item\"><a href=\"https://www.hashicorp.com/blog/resilient-infrastructure-with-nomad-scheduling\" class=\"markdown-link\">Building Resilient Infrastructure: Scheduling</a></li>\n<li class=\"markdown-list-item\"><a href=\"https://www.hashicorp.com/blog/building-resilient-infrastructure-with-nomad-job-lifecycle\" class=\"markdown-link\">Building Resilient Infrastructure: Job Lifecycle</a></li>\n</ul>\n<h3 class=\"markdown-sub-subtitle\" id=\"prestart-hook-for-one-time-initialization\" style=\"position:relative;\"><a href=\"#prestart-hook-for-one-time-initialization\" aria-label=\"prestart hook for one time initialization permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prestart hook for one-time initialization</h3>\n<p class=\"markdown-para\">An application may have some one-time initialization task that needs to be completed before the main application can start. For example, before starting a Rails app, the database migrations should be run. This can be accomplished in Nomad using the <a href=\"https://www.nomadproject.io/docs/job-specification/lifecycle\" class=\"markdown-link\">lifecycle</a> stanza.</p>\n<p class=\"markdown-para\">The idea is, you would have multiple tasks within a group, let's say one task to start the Rails app, and another to run the database migrations. For the migration task, you define the lifecycle hook to be <code>prestart</code>, to indicate the db migrations should run <em class=\"markdown-emphasis\">before</em> the Rails task is started. You would also set <code>sidecar</code> to false, to indicate that this task will start and finish before the main task is started. Setting <code>sidecar</code> to true would make the task run for the duration of the main task, which might be desirable for something like a logging agent.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;dbmigrate&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># The dbmigrate task will run BEFORE the puma task in this group.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">lifecycle</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">hook</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;prestart&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">sidecar</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;bundle exec rake db:migrate&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;puma&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;bundle exec puma&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"nomad-environment-variables\" style=\"position:relative;\"><a href=\"#nomad-environment-variables\" aria-label=\"nomad environment variables permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nomad Environment Variables</h3>\n<p class=\"markdown-para\">Nomad ships with a number of <a href=\"https://www.nomadproject.io/docs/runtime/environment\" class=\"markdown-link\">environment variables</a> that are available in the job file <em class=\"markdown-emphasis\">and</em> in any command/scripts that are run in Docker containers as part of the job.</p>\n<p class=\"markdown-para\">Here's an example of using <code>NOMAD_ALLOC_INDEX</code> in a script that runs database migrations, to ensure that it only runs once, when located in a task group that runs multiple instances (specified using <code>count</code> parameter of the <code>group</code> stanza).</p>\n<p class=\"markdown-para\">Here's a modified version of the jobspec from the previous example that introduced the prestart hook:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Will launch 3 instances of the &quot;web&quot; group.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># count parameter can only be specified at the group level.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">count</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># But the database migrations should only run once.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Notice the use of a command script where we will</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># write some custom logic using env var NOMAD_ALLOC_INDEX</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;dbmigrate&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">lifecycle</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">hook</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;prestart&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">sidecar</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;registry/image:tag&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;/usr/bin/run-db-migrations&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;puma&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;registry/image:tag&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;bundle exec puma&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">Where <code>/usr/bin/run-db-migrations</code> is a custom script that is added to the Docker image. It checks the value of the <code>NOMAD_ALLOC_INDEX</code> environment variable. Database migrations will only be run when this is <code>z0</code>, the first allocation, and will not be run for any others.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#!/bin/bash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">if</span><span class=\"mtk1\"> [ </span><span class=\"mtk6\">&quot;z</span><span class=\"mtk1\">$NOMAD_ALLOC_INDEX</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">==</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;z0&quot;</span><span class=\"mtk1\"> ]</span><span class=\"mtk7\">;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">then</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  RAILS_ENV=production bundle </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> rake db:migrate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">fi</span></span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"replace-cron-jobs\" style=\"position:relative;\"><a href=\"#replace-cron-jobs\" aria-label=\"replace cron jobs permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Replace Cron Jobs</h3>\n<p class=\"markdown-para\">If your application also has cron jobs, these can easily be replaced with Nomad's <a href=\"https://www.nomadproject.io/docs/job-specification/periodic\" class=\"markdown-link\">periodic</a> jobs. For example, given the following crontab for a job that runs daily at 10:30:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">30 10 * * * nobody bundle exec rake app:some_daily_task</span></span></code></pre>\n<p class=\"markdown-para\">It can be replaced with the following jobspec:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;cron_daily&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">periodic</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">cron</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;30 10 * * *&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;daily&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;daily&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\">   </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;RAILS_ENV=production bundle exec rake app:some_daily_task&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">One challenge with cron jobs, especially for those that run frequently, is how to prevent the next instance of the job from launching, if the previous instance is still running. This can be be <a href=\"https://serverfault.com/questions/82857/prevent-duplicate-cron-jobs-running\" class=\"markdown-link\">tricky</a> to solve with cron, but with Nomad, this can be solved by adding the <code>prohibit_overlap</code> overlap to the <code>periodic</code> stanza.</p>\n<p class=\"markdown-para\">Here's an example of this property for a job that runs every minute:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;cron_frequent_task&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">periodic</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">cron</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;* * * * *&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">prohibit_overlap</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;frequent&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;frequent&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\">   </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\">    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;RAILS_ENV=production bundle exec rake app:frequent_task&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nIf you have a lot of cron jobs to convert to Nomad, it can be tedious to write up all the jobspec files by hand. See my post on <a class=\"markdown-link\" href=\"https://danielabaron.me/blog/convert-multiple-cron-jobs-to-nomad-periodic-jobs/\">Migrating Cron Jobs to Nomad the Lazy Way</a> for an easy way to do this.\n</aside>\n<h3 class=\"markdown-sub-subtitle\" id=\"turn-off-auto-restart\" style=\"position:relative;\"><a href=\"#turn-off-auto-restart\" aria-label=\"turn off auto restart permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Turn off auto restart</h3>\n<p class=\"markdown-para\">One of the many fantastic features of Nomad is integration with Vault for secrets management. From a jobspec file, you can read in secrets from Vault, and have them loaded as environment variables in the application. Without a platform managing this, if an environment variable is changed, the application must manually be restarted to pick up the new value. With Nomad's Vault integration, any change to a secret in Vault will cause all jobs that use this secret to automatically be restated.</p>\n<p class=\"markdown-para\">However, there may be times where this is undesirable. One such case is for cron jobs (called periodic jobs in Nomad). For example, the application I'm working on has an autorenew cron job that picks up all subscriptions that are due for renewal and renews them, which includes billing the customer and sending a confirmation email. We would not want this job stopped in the middle and restarted just because a setting had been changed, it would be better for the job to complete and have the change be picked up next time the job runs.</p>\n<p class=\"markdown-para\">In order to implement this behaviour, set <code>change_mode = \"noop\"</code> in the <code>template</code> stanza that reads in the secrets (default is <code>restart</code>):</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;autorenew&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;autorenew&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;autornew&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">template</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">destination</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;secrets/local.env&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">env</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">change_mode</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;noop&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">data</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> &lt;&lt;EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">API_KEY=&quot;{{with secret &quot;secret/data/api-key&quot;}}{{.Data.value}}{{end}}&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">The <code>destination</code> file is still updated when the secrets change and so the updated value will be used the next time the cron job is scheduled.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"populate-environment-variables-from-vault\" style=\"position:relative;\"><a href=\"#populate-environment-variables-from-vault\" aria-label=\"populate environment variables from vault permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Populate Environment Variables from Vault</h3>\n<p class=\"markdown-para\">As mentioned in the previous section, Nomad integrates with Vault for secrets management, which can be used to set environment variables for the containerized application that Nomad is running as a task. This is accomplished with the <a href=\"https://www.nomadproject.io/docs/job-specification/template\" class=\"markdown-link\">template</a> stanza. This stanza has a few parameters. Most significant is the <code>data</code>  parameter which can take either a single line string, or multi-line using a heredoc. This string is written using a <a href=\"https://learn.hashicorp.com/tutorials/nomad/go-template-syntax\" class=\"markdown-link\">Go template</a> and is one of the least intuitive aspects of Nomad.</p>\n<p class=\"markdown-para\">Let's start with a simple example. Suppose the application has a single secret such as DB_PASSWORD that the application expects to be provided as an environment variable to connect to the database. Given that the <a href=\"https://learn.hashicorp.com/tutorials/vault/getting-started-install?in=vault/getting-started\" class=\"markdown-link\">Vault CLI</a> has been installed and configured, the database password would be persisted in Vault as follows:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">vault kv put kv/secret/config DB_PASSWORD=veryverysecretpassword</span></span></span></code></pre>\n<p class=\"markdown-para\">Then the following jobspec would read in this secret (when being deployed by Nomad) and expose it as an environment variable to the application:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;example&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">type</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;service&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;frontend&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># Here is where the Vault integration happens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">template</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\"># result of data template will be populated in this file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">destination</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;secrets/file.env&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\"># all key/value pairs read will be exposed as environment variables to the frontend task</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">env</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\"># read secret from Vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">data</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> &lt;&lt;EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{with secret &quot;kv/secret/config&quot;}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">DB_PASSWORD={{.Data.data.DB_PASSWORD | toJSON}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{end}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">If you're thinking \"whaaaat the heck is that data thing???\", don't worry. Like I mentioned earlier, this part of Nomad is not very intuitive. While a full coverage of the <a href=\"https://learn.hashicorp.com/tutorials/nomad/go-template-syntax\" class=\"markdown-link\">template syntax</a> is out of scope for this post, here's a brief explanation of what's going on:</p>\n<p class=\"markdown-para\">The <code>&#x3C;&#x3C;IDENTIFIER ... IDENTIFIER</code> denotes the beginning and end of the heredoc, which is a multiline template string. Think of the content in the heredoc as a function that outputs some value. Whatever is output will get written to the <code>destination</code> file, which is <code>secrets/file.env</code> in the above example.</p>\n<p class=\"markdown-para\">Any plain string literals such as <code>DB_PASSWORD</code> will get output exactly as they appear.</p>\n<p class=\"markdown-para\">Anything between double curly braces <code>{{ ... }}</code> represents a dynamic portion of the template, these contain actions.</p>\n<p class=\"markdown-para\"><code>with</code> is an action that redefines the context available to the template. I couldn't find a good explanation of what <code>with secret</code> does but from observation, it reads in the secret stored in Vault at the given location (<code>kv/secret/config</code> in the above example). Now the value from Vault can be traversed using <code>.Data.data.DB_PASSWORD</code>. The reason for <code>.Data.data</code> has to do with how Vault stores the data.</p>\n<p class=\"markdown-para\">The pipe symbol <code>|</code> is used to chain together one or more commands. Since the database password could contain special characters, it's recommended to run all values extracted from Vault through the <code>toJSON</code> function to ensure they're properly parsed.</p>\n<p class=\"markdown-para\">The result of all this is the following contents written to the destination file <code>secrets/file.env</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">DB_PASSWORD=veryverysecretpassword</span></span></code></pre>\n<p class=\"markdown-para\">And if you were to shell in the container (next section on Nomad CLI will explain how to do that) and run <code>env</code>, the <code>DB_PASSWORD</code> environment variable would be listed.</p>\n<p class=\"markdown-para\">Well that's all well and good for a single environment variable, but what if your application has many environment variables? For example, it could be using multiple databases, and integrate with third party services for transactional email, marketing campaigns, payment provider etc., all of which require configuring secrets.</p>\n<p class=\"markdown-para\">Of course you could populate multiple key/value pairs in Vault like this:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">vault kv put kv/secret/config DB_PASSWORD=veryverysecretpassword OTHER_DB_PASSWORD=anothersecret EMAIL_PROVIDER_API_KEY=abc123...</span></span></span></code></pre>\n<p class=\"markdown-para\">And update the template data with a row for each secret.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;example&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;frontend&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">template</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">destination</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;secrets/file.env</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">        env = true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">        # read multiple secrets from Vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">        data = &lt;&lt;EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{with secret &quot;</span><span class=\"mtk1\">kv/secret/config</span><span class=\"mtk6\">&quot;}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">DB_PASSWORD={{.Data.data.DB_PASSWORD | toJSON}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">OTHER_DB_PASSWORD={{.Data.data.OTHER_DB_PASSWORD | toJSON}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">EMAIL_PROVIDER_API_KEY={{.Data.data.EMAIL_PROVIDER_API_KEY | toJSON}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{end}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">The problem  with this is the <code>template</code> stanza will get quite lengthy. Also maintenance becomes an issue because the <code>template</code> stanza can only be placed in the <code>task</code> stanza. So if the jobspec has multiple groups/tasks, the lengthy template needs to occur in all of them, and if a new secret is added, multiple template stanzas need to be updated.</p>\n<p class=\"markdown-para\">Fortunately there's a more efficient way to do this. It involves populating Vault with a JSON file rather than individual key/value pairs. Then using the <code>range</code> action in the template stanza, to iterate over the key/value map from Vault, and dynamically create all environment variables from the json that was loaded in Vault.</p>\n<p class=\"markdown-para\">To start, create a json file with all the secrets, this is just temporary and can be deleted after its loaded into Vault. For example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"json\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"># data.json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;DB_PASSWORD&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;veryverysecretpassword&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;OTHER_DB_PASSWORD&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;anothersecret&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;EMAIL_PROVIDER_API_KEY&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;abc123&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">Run the following command to load this file into Vault:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">vault kv put kv/secret/config @data.json</span></span></span></code></pre>\n<p class=\"markdown-para\">Update the template stanza in the jobspec to use the <code>range</code> action to iterate over each key/value pair in Vault. Since the value being read from Vault is a map, two variables <code>$key</code> and <code>$value</code> can be assigned with the result of each key/value pair, i.e. environment variable and its value. These then get written out with a literal equals sign <code>=</code> between them, with the value being piped through the <code>toJSON</code> function as explained previously:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;example&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;frontend&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">template</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">destination</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;secrets/file.env</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">        env = true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">        # read multiple secrets from Vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">        data = &lt;&lt;EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{with secret &quot;</span><span class=\"mtk1\">kv/hover/config</span><span class=\"mtk6\">&quot;}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{range $key, $value := .Data.data}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{$key}}={{$value | toJSON}}{{end}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">{{end}}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">EOH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">After this job is deployed, the destination file <code>secrets/file.env</code> will be populated as follows:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">DB_PASSWORDveryverysecretpassword</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">OTHER_DB_PASSWORDanothersecret</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">EMAIL_PROVIDER_API_KEYabc123</span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"nomad-cli\" style=\"position:relative;\"><a href=\"#nomad-cli\" aria-label=\"nomad cli permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nomad CLI</h2>\n<p class=\"markdown-para\">This next section contains tips on working with the Nomad CLI. Follow the <a href=\"https://www.nomadproject.io/docs/install\" class=\"markdown-link\">instructions</a> for your OS to install it. Although Nomad does have a Web UI to display jobs, their status, and allocations among many other things, it's usually more convenient to use the CLI to get this information.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"validation\" style=\"position:relative;\"><a href=\"#validation\" aria-label=\"validation permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation</h3>\n<p class=\"markdown-para\">For a new jobspec file, or if you've made changes to an existing one, you'll want to validate it first, before submitting it to Nomad for deployment. This will provide quick feedback if there are any errors in the file.</p>\n<p class=\"markdown-para\">For example, given the following jobspec:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># example.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;example&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">datacenters</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;us-west-1&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">type</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;service&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;frontend&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;hashicorp/web-frontend&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">ports</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;http&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;https&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">It can be validated as follows:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad job validate example.nomad</span></span></code></pre>\n<p class=\"markdown-para\">Output from the validate command shows validation passed:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Job Warnings:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">0 warning(s):</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Job validation successful</span></span></code></pre>\n<p class=\"markdown-para\">As an exercise, we can intentionally break this, suppose the job had specified <code>type = \"services\"</code> instead of <code>service</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># example.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;example&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">datacenters</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;us-west-1&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">type</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;services&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;frontend&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;hashicorp/web-frontend&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">ports</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;http&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;https&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">This time the result of running the validation command <code>nomad job validate example.nomad</code> yields an error:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Job validation errors:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">1 error occurred:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t* Invalid job type: &quot;services&quot;</span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"allocation-status\" style=\"position:relative;\"><a href=\"#allocation-status\" aria-label=\"allocation status permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Allocation Status</h3>\n<p class=\"markdown-para\">After deploying a job (<code>nomad job run /path/to/jobspec_file</code>), the output of this command may indicate that it's complete, but it's possible that some tasks may have failed to start. In order to get more insight into this, you'll want to query the job and <em class=\"markdown-emphasis\">allocation</em> status.</p>\n<p class=\"markdown-para\">Before showing the CLI command for allocation status, let's take a brief detour to define it. An allocation is how Nomad declares that some tasks in a given job should be run on a particular node, aka Nomad client machine.</p>\n<p class=\"markdown-para\">All of the jobspec examples so far have shown a single task, but you can actually have multiple tasks within a group, and multiple groups within a job. Putting multiple tasks within the same group tells Nomad that you want all those tasks running on the same Nomad client machine. Having one task per group and multiple groups within a job tells Nomad that it's free to allocate each task group to separate Nomad clients (although it could still choose to allocate them to the same client, pending resource utilization).</p>\n<p class=\"markdown-para\">For example, suppose you submit the following jobspec to run a Rails app including 3 Puma servers and Sidekiq for background job processing:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"nomad\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># railsapp.nomad</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">job</span><span class=\"mtk6\"> &quot;rails-app&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">datacenters</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;us-west-1&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk10 mtki\">type</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;service&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;web&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10 mtki\">count</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;puma&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;bundle exec puma&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">group</span><span class=\"mtk6\"> &quot;background&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">task</span><span class=\"mtk6\"> &quot;sidekiq&quot;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10 mtki\">driver</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;docker&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">config</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">image</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;ghcr.io/org/project/app:latest&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">command</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;bash&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10 mtki\">args</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk6\">&quot;-c&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk6\">&quot;bundle exec sidekiq&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">After submitting the job via <code>nomad job run railsapp.nomad</code>, the console output will show that submission is complete. But to check whether things are actually working, first check the job status:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad job status rails-app</span></span></code></pre>\n<p class=\"markdown-para\">The last portion of this output will show the allocations:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Allocations</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ID        Node ID   Task Group  Version  Desired  Status   Created   Modified</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">dac34c14  4163a6ca  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">df7e2471  4163a6ca  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">26002bd0  2008ce70  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">fa2b2ed6  4163a6ca  background   1       run      running  1d6h ago  1d6h ago</span></span></code></pre>\n<p class=\"markdown-para\">There are 4 allocations - 3 are for the <code>web</code> group because the jobspec indicated a <code>count</code> property of 3 for these, and 1 for the <code>background</code> group because this jobspec only indicated 1 sidekiq process (the <code>count</code> property defaults to 1).</p>\n<p class=\"markdown-para\">In the previous example, all allocations were successfully started, but sometimes you may see the status as <code>failed</code>. In this case, you can inspect the allocation to investigate by passing the allocation ID (first column of previous output) to the <code>nomad alloc status</code> command. For example, to inspect the first <code>web</code> allocation:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad alloc status dac34c14</span></span></code></pre>\n<p class=\"markdown-para\">The output will include events that happened during this allocation:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Task &quot;puma&quot; is &quot;running&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Task Events:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Started At     = 2021-12-17T19:28:21Z</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Finished At    = N/A</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Total Restarts = 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Last Restart   = N/A</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Recent Events:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Time                       Type        Description</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-17T14:28:21-05:00  Started     Task started by client</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-17T14:28:19-05:00  Driver      Downloading image</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-17T14:28:18-05:00  Task Setup  Building Task Directory</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-17T14:28:14-05:00  Received    Task received by client</span></span></code></pre>\n<p class=\"markdown-para\">If something went wrong such as the Nomad client could not download the Docker image, the error would be shown in the events.</p>\n<p class=\"markdown-para\"><strong class=\"markdown-strong\">Bonus:</strong> The Nomad CLI supports tab completion. Simply run <code>nomad -autocomplete-install</code> to enable it.</p>\n<p class=\"markdown-para\">For example, given a list of allocations displayed from the <code>nomad status rails-app</code> command:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Allocations</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ID        Node ID   Task Group  Version  Desired  Status   Created   Modified</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">dac34c14  4163a6ca  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">df7e2471  4163a6ca  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">26002bd0  2008ce70  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">fa2b2ed6  4163a6ca  background   1       run      running  1d6h ago  1d6h ago</span></span></code></pre>\n<p class=\"markdown-para\">You can type in <code>nomad alloc status da{TAB}</code> and Nomad will fill in the allocation ID to complete the command.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"run-a-shell-in-container\" style=\"position:relative;\"><a href=\"#run-a-shell-in-container\" aria-label=\"run a shell in container permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run a shell in container</h3>\n<p class=\"markdown-para\">Sometimes you'll want to shell into a running container to troubleshoot something. For example, to check whether the expected environment variables were properly populated from Vault secrets, or whether you can ping a certain host if having some networking issues. This can be done with the <code>nomad alloc exec</code> command, passing in the task name and allocation id.</p>\n<p class=\"markdown-para\">To launch a shell in the sidekiq container from the previous example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nomad alloc </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> -i -t -task sidekiq fa2b2ed6 /bin/bash</span></span></span></code></pre>\n<p class=\"markdown-para\">Tab completion still works here for the allocation ID.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"run-a-command-in-container\" style=\"position:relative;\"><a href=\"#run-a-command-in-container\" aria-label=\"run a command in container permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run a command in container</h3>\n<p class=\"markdown-para\">Taking it one step further, you might want to run a specific command from a shell in the container. For example, with a Rails app, a common troubleshooting technique is to launch a Rails console and run some application code.</p>\n<p class=\"markdown-para\">The two step way to do this is to run a shell as before, then type in your command from within the shell, for example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nomad alloc </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> -i -t -task puma fa2b2ed6 /bin/bash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">root@725b3752ada5: bundle </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> rails c</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># do rails console things...</span></span></span></code></pre>\n<p class=\"markdown-para\">Shorten this to one step with the <code>-c</code> flag to pass a command to the shell:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nomad alloc </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> -i -t -task puma fa2b2ed6 /bin/bash -c </span><span class=\"mtk6\">&quot;bundle exec rails c&quot;</span></span></span></code></pre>\n<p class=\"markdown-para\">Tab completion still works here for the allocation ID.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"node-status\" style=\"position:relative;\"><a href=\"#node-status\" aria-label=\"node status permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Status</h3>\n<p class=\"markdown-para\">Recall the list of allocations that were displayed from the <code>nomad job status rails-app</code> command:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Allocations</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ID        Node ID   Task Group  Version  Desired  Status   Created   Modified</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">dac34c14  4163a6ca  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">df7e2471  4163a6ca  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">26002bd0  2008ce70  web          1       run      running  1d6h ago  1d6h ago</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">fa2b2ed6  4163a6ca  background   1       run      running  1d6h ago  1d6h ago</span></span></code></pre>\n<p class=\"markdown-para\">We've been looking at the allocations, but you can also get more information about the node (aka Nomad client machine) that the allocation is running on. This is done by passing the Node ID (second column in the Allocations table) to the <code>nomad node status</code> command. In the above table, we can see that two of the <code>web</code> task groups and the <code>background</code> group are running on the same node, whereas the third <code>web</code> group got allocated to a different node.</p>\n<p class=\"markdown-para\">To get information about the node that's running the two web and background groups:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad node status 4163a6ca</span></span></code></pre>\n<p class=\"markdown-para\">This displays a lot of output, just going to highlight a few things. The Node Events can be useful for troubleshooting, for example if the node is no longer able to connect to the docker daemon. In the example below, it was able to recover:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Node Events</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Time                  Subsystem       Message</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-06T18:49:11Z  Cluster         Node re-registered</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-06T18:42:08Z  Cluster         Node heartbeat missed</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-03T23:07:31Z  Driver: docker  Healthy</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2021-12-03T23:04:01Z  Driver: docker  Failed to connect to docker daemon</span></span></code></pre>\n<p class=\"markdown-para\">The output also shows cpu and memory resources that are allocated on this node and how much is currently being used:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Allocated Resources</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">CPU              Memory         Disk</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">36988/36784 MHz  32 GiB/31 GiB  2.1 GiB/93 GiB</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Host Resource Utilization</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">CPU            Memory          Disk</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">889/36784 MHz  4.8 GiB/31 GiB  110 MiB/98 GiB</span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"job-version---whats-changed\" style=\"position:relative;\"><a href=\"#job-version---whats-changed\" aria-label=\"job version   whats changed permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Job Version - What's Changed?</h3>\n<p class=\"markdown-para\">Every time you run <code>nomad job run /path/to/jobspec</code>, Nomad will create a new version of the job. It can be useful to know what was changed between versions.</p>\n<p class=\"markdown-para\">The following command will display the complete version history for a job:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad job history -p job_name</span></span></code></pre>\n<p class=\"markdown-para\">However, if there have been a lot of deploys, the output of this can be too verbose. It's also possible to get history for just one specific version number, which will show the diff between that version and the previous version.</p>\n<p class=\"markdown-para\">For example, the <code>rails-app</code> job from the previous section has 50 versions. To see the difference between version 50 and 49 that came before it:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad job history -version 50 -p rails-app</span></span></code></pre>\n<p class=\"markdown-para\">The sample output below shows that the <code>sidekiq</code> task in the <code>background</code> group had its memory increased from 2GB to 8GB:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Version     = 50</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Stable      = true</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Submit Date = 2021-12-17T14:27:22-05:00</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Diff        =</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+/- Job: &quot;rails-app&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+/- Task Group: &quot;background&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  +/- Task: &quot;sidekiq&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    +/- Resources {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      +/- MemoryMB:    &quot;2048&quot; =&gt; &quot;8192&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          MemoryMaxMB: &quot;0&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"aliases-and-bash-functions\" style=\"position:relative;\"><a href=\"#aliases-and-bash-functions\" aria-label=\"aliases and bash functions permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aliases and Bash Functions</h3>\n<p class=\"markdown-para\">Here are a few aliases and shell functions I use to save myself typing for the most frequently run Nomad CLI commands.</p>\n<p class=\"markdown-para\">Get status for the main web app <code>rails-app</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># change the alias value for something easy to remember for your job</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">alias</span><span class=\"mtk1\"> nsra=</span><span class=\"mtk6\">&quot;nomad status rails-app&quot;</span></span></span></code></pre>\n<p class=\"markdown-para\">Get allocation status:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># usage nas {alloc id}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">alias</span><span class=\"mtk1\"> nas=</span><span class=\"mtk6\">&quot;nomad alloc status&quot;</span></span></span></code></pre>\n<p class=\"markdown-para\">Tab complete will work with the alias, for example, if first few characters of the allocation ID are <code>4d</code>, then type: <code>nas 4d{TAB}</code></p>\n<p class=\"markdown-para\">The other commands I use most frequently are to run a shell, and Rails console in a container. An alias won't work here as the allocation ID occurs in the middle of the command, and AFAIK, aliases don't support variables. However, this can be solved with shell functions.</p>\n<p class=\"markdown-para\">Add the following functions to your bash or zsh profile. Replace the task names with the values from your jobspec file:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Run bash in the Nomad puma container specified by allocation id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Usage: nab alloc_id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">nab</span><span class=\"mtk1\"> () { nomad alloc </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> -i -t -task puma $@ /bin/bash }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Run a Rails console in the Nomad puma container specified by allocation id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Usage: nrc alloc_id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">nrc</span><span class=\"mtk1\"> () { nomad alloc </span><span class=\"mtk9\">exec</span><span class=\"mtk1\"> -i -t -task puma $@ /bin/bash -c </span><span class=\"mtk6\">&quot;bundle exec rails c&quot;</span><span class=\"mtk1\"> }</span></span></span></code></pre>\n<h3 class=\"markdown-sub-subtitle\" id=\"easily-switch-between-namespaces\" style=\"position:relative;\"><a href=\"#easily-switch-between-namespaces\" aria-label=\"easily switch between namespaces permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easily switch between Namespaces</h3>\n<p class=\"markdown-para\">When running Nomad CLI commands from a laptop and connecting to a remote Nomad cluster, there are a number of environment variables that must be specified. These include:</p>\n<ul class=\"markdown-list-unordered\">\n<li class=\"markdown-list-item\"><code>NOMAD_NAMESPACE</code>: Namespace to limit commands to, for example, our team uses: <code>dev</code>, <code>staging</code>, and <code>prod</code>.</li>\n<li class=\"markdown-list-item\"><code>NOMAD_ADDR</code>: Address of the machine where Nomad server is running. For our installation, this varies by namespace.</li>\n<li class=\"markdown-list-item\"><code>NOMAD_TOKEN</code>: ACL token to authenticate API requests. For our setup, this also varies by namespace.</li>\n</ul>\n<p class=\"markdown-para\">When using multiple namespaces and having to switch between them, it's tedious to have to remember to modify one's profile to ensure the correct set of environment variables are exported.</p>\n<p class=\"markdown-para\"><a href=\"https://direnv.net/\" class=\"markdown-link\">direnv</a> is a shell extension that makes this more convenient. It will load/unload environment variables based on presence of a <code>.envrc</code> file in the current directory. Here's how I've organized to support easily switching between our dev, staging, and prod environments.</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">nomad-env</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── dev</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   └── .envrc</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── staging</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   └── .envrc</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└── prod</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    └── .envrc</span></span></code></pre>\n<p class=\"markdown-para\">Where each .envrc file contains:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">NOMAD_ADDR=https://nomad-server-url (for the current env)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">NOMAD_TOKEN=acl_token (for the current env)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">NOMAD_NAMESPACE=dev (or staging or prod)</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nNote that direnv is not Nomad specific. This tool can be used anywhere you need to easily switch between sets of environment variables.\n</aside>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">This post has covered a number of useful tips for working with Nomad including working with the jobspec HCL file and making use of the Nomad CLI. Here are some resources for further reading and bookmarking if you're going to be using Nomad:</p>\n<ul class=\"markdown-list-unordered\">\n<li class=\"markdown-list-item\"><a href=\"https://www.nomadproject.io/docs/job-specification\" class=\"markdown-link\">Job Specification</a></li>\n<li class=\"markdown-list-item\"><a href=\"https://www.nomadproject.io/docs/commands\" class=\"markdown-link\">Command Line Reference</a></li>\n<li class=\"markdown-list-item\"><a href=\"https://www.nomadproject.io/docs/runtime/environment\" class=\"markdown-link\">Environment Variables</a></li>\n<li class=\"markdown-list-item\"><a href=\"https://github.com/angrycub/nomad_example_jobs\" class=\"markdown-link\">Github Repo with Numerous Example Jobs</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk10 { color: #FD971F; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk12 { color: #CFCFC2; }\n  .monokai .mtk8 { color: #F8F8F0; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":21,"tableOfContents":"<ul>\n<li>\n<p><a href=\"#job-specification\">Job Specification</a></p>\n<ul>\n<li><a href=\"#increase-docker-pull-timeout\">Increase Docker Pull Timeout</a></li>\n<li><a href=\"#reuse-docker-tag-for-development\">Reuse Docker Tag for Development</a></li>\n<li><a href=\"#always-deploy-a-new-job-version\">Always deploy a new job version</a></li>\n<li><a href=\"#resiliency\">Resiliency</a></li>\n<li><a href=\"#prestart-hook-for-one-time-initialization\">Prestart hook for one-time initialization</a></li>\n<li><a href=\"#nomad-environment-variables\">Nomad Environment Variables</a></li>\n<li><a href=\"#replace-cron-jobs\">Replace Cron Jobs</a></li>\n<li><a href=\"#turn-off-auto-restart\">Turn off auto restart</a></li>\n<li><a href=\"#populate-environment-variables-from-vault\">Populate Environment Variables from Vault</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#nomad-cli\">Nomad CLI</a></p>\n<ul>\n<li><a href=\"#validation\">Validation</a></li>\n<li><a href=\"#allocation-status\">Allocation Status</a></li>\n<li><a href=\"#run-a-shell-in-container\">Run a shell in container</a></li>\n<li><a href=\"#run-a-command-in-container\">Run a command in container</a></li>\n<li><a href=\"#node-status\">Node Status</a></li>\n<li><a href=\"#job-version---whats-changed\">Job Version - What's Changed?</a></li>\n<li><a href=\"#aliases-and-bash-functions\">Aliases and Bash Functions</a></li>\n<li><a href=\"#easily-switch-between-namespaces\">Easily switch between Namespaces</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#conclusion\">Conclusion</a></p>\n</li>\n</ul>","frontmatter":{"title":"Nomad Tips and Tricks","date":"02 Jan 2022","description":"Some tips and tricks for working with Hashicorp Nomad","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#081838","images":{"fallback":{"src":"/static/fb5b73446903676e02ce451c6835fb42/fc2d4/nomad-tips-tricks-rahul-bhosale-yBgC-qVCxMg-unsplash.jpg","srcSet":"/static/fb5b73446903676e02ce451c6835fb42/b834a/nomad-tips-tricks-rahul-bhosale-yBgC-qVCxMg-unsplash.jpg 225w,\n/static/fb5b73446903676e02ce451c6835fb42/21c52/nomad-tips-tricks-rahul-bhosale-yBgC-qVCxMg-unsplash.jpg 450w,\n/static/fb5b73446903676e02ce451c6835fb42/fc2d4/nomad-tips-tricks-rahul-bhosale-yBgC-qVCxMg-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/fb5b73446903676e02ce451c6835fb42/71a10/nomad-tips-tricks-rahul-bhosale-yBgC-qVCxMg-unsplash.webp 225w,\n/static/fb5b73446903676e02ce451c6835fb42/901f1/nomad-tips-tricks-rahul-bhosale-yBgC-qVCxMg-unsplash.webp 450w,\n/static/fb5b73446903676e02ce451c6835fb42/4ffff/nomad-tips-tricks-rahul-bhosale-yBgC-qVCxMg-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":600}}}},"fields":{"slug":"/blog/nomad-tips-and-tricks/"}},"relatedP":{"edges":[{"node":{"id":"686cc099-3341-595a-b8b0-fac14143f6b1","frontmatter":{"title":"Crossword Solver with CentOS","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#a8a898","images":{"fallback":{"src":"/static/4abde7ae46231a2c1375762571918d18/26528/crossword-marjanblan-i9bAvQ57J1k-unsplash.jpg","srcSet":"/static/4abde7ae46231a2c1375762571918d18/26528/crossword-marjanblan-i9bAvQ57J1k-unsplash.jpg 300w","sizes":"300px"},"sources":[{"srcSet":"/static/4abde7ae46231a2c1375762571918d18/5d6c3/crossword-marjanblan-i9bAvQ57J1k-unsplash.webp 300w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/crossword-solver-with-centos/"}}},{"node":{"id":"f782f0c1-28a3-59fe-932d-d741ee604f5b","frontmatter":{"title":"Debug Github Actions","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#081808","images":{"fallback":{"src":"/static/bc9cf9fe62735cdf137667e63704ac8c/26528/computer-bug.jpg","srcSet":"/static/bc9cf9fe62735cdf137667e63704ac8c/26528/computer-bug.jpg 300w,\n/static/bc9cf9fe62735cdf137667e63704ac8c/43429/computer-bug.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/bc9cf9fe62735cdf137667e63704ac8c/5d6c3/computer-bug.webp 300w,\n/static/bc9cf9fe62735cdf137667e63704ac8c/68dbc/computer-bug.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/debug-github-action/"}}},{"node":{"id":"c382bd2e-abc6-5f49-9e07-c45c351245f0","frontmatter":{"title":"Migrate Cron Jobs to Nomad the Lazy Way","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#585858","images":{"fallback":{"src":"/static/314c220e8d522b3892c0e1a562c28733/26528/lazy-david-clode-BCI9_1eJfO0-unsplash.jpg","srcSet":"/static/314c220e8d522b3892c0e1a562c28733/26528/lazy-david-clode-BCI9_1eJfO0-unsplash.jpg 300w,\n/static/314c220e8d522b3892c0e1a562c28733/43429/lazy-david-clode-BCI9_1eJfO0-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/314c220e8d522b3892c0e1a562c28733/5d6c3/lazy-david-clode-BCI9_1eJfO0-unsplash.webp 300w,\n/static/314c220e8d522b3892c0e1a562c28733/68dbc/lazy-david-clode-BCI9_1eJfO0-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/convert-multiple-cron-jobs-to-nomad-periodic-jobs/"}}}]}},"pageContext":{"slug":"/blog/nomad-tips-and-tricks/","relatedPosts":["Migrate Cron Jobs to Nomad the Lazy Way","Crossword Solver with CentOS","Debug Github Actions"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}