{"componentChunkName":"component---src-templates-post-js","path":"/blog/capture-browser-console-logs-capybara-cuprite/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">When writing Rails system tests, a common practice is to use <a href=\"https://teamcapybara.github.io/capybara/\" class=\"markdown-link\">Capybara</a> to simulate user interactions. If the front end is a JavaScript-heavy Single Page Application (SPA), this also requires installing and configuring a JavaScript driver for Capybara, such as <a href=\"https://github.com/rubycdp/cuprite\" class=\"markdown-link\">Cuprite</a>, to test JavaScript execution in the browser.</p>\n<p class=\"markdown-para\">When testing a SPAs, it can be challenging to understand how different pieces of code are interacting or when certain code is executing. In cases where unexpected behavior arises during test execution, such as event handling issues or timing problems, adding <code>console.log</code> statements at strategic points in the front-end code can help. But how do you capture and view those logs while running Rails system tests?</p>\n<p class=\"markdown-para\">Unfortunately, the Cuprite and <a href=\"https://github.com/rubycdp/ferrum\" class=\"markdown-link\">Ferrum</a> (the underlying driver for Cuprite) documentation doesn’t make this immediately clear. So in this post, I’ll walk you through why capturing browser console logs is useful and how to configure your tests to capture those logs.</p>\n<h2 class=\"markdown-subtitle\" id=\"why-capture-browser-console-logs\" style=\"position:relative;\"><a href=\"#why-capture-browser-console-logs\" aria-label=\"why capture browser console logs permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why Capture Browser Console Logs?</h2>\n<p class=\"markdown-para\">Imagine a scenario where one of your system tests fails intermittently and you're pretty sure the issue is in some unexpected JavaScript execution. You’ve added some <code>console.log(...)</code> statements in your app to debug the issue. However, in headless mode, it’s not obvious how to access these logs. For example, somewhere in the front end JavaScript:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// app/javascript/some_code.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">console</span><span class=\"mtk1\">.</span><span class=\"mtk9\">log</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;==== ROUTER NAVIGATE FINISHED&quot;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p class=\"markdown-para\">You might consider running the test with a non-headless browser (like Chrome) and use debugging tools (such as <code>binding.pry</code> in the system test) to inspect the console. But there’s a problem with this approach: debugging mode often slows down the browser, giving your JavaScript more time to execute. In this case, the timing-related issue may not occur, and the test passes – masking the real problem.</p>\n<p class=\"markdown-para\">To truly replicate the failure, you need to capture the browser’s console logs while running the test at full speed. This requires a method to redirect <code>console.log</code> output from the browser to your test environment.</p>\n<h2 class=\"markdown-subtitle\" id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p class=\"markdown-para\">Here’s how you can configure the Cuprite driver to capture the browser console logs:</p>\n<ol class=\"markdown-list-ordered\">\n<li class=\"markdown-list-item\"><strong class=\"markdown-strong\">Modify your Capybara driver configuration</strong> to add a <code>StringIO</code> logger.</li>\n<li class=\"markdown-list-item\"><strong class=\"markdown-strong\">Access the logs in your tests</strong> after executing the desired page actions.</li>\n<li class=\"markdown-list-item\"><strong class=\"markdown-strong\">Output the captured logs</strong> for inspection.</li>\n</ol>\n<h3 class=\"markdown-sub-subtitle\" id=\"step-1-modify-the-capybara-driver\" style=\"position:relative;\"><a href=\"#step-1-modify-the-capybara-driver\" aria-label=\"step 1 modify the capybara driver permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Modify the Capybara Driver</h3>\n<p class=\"markdown-para\">To capture the logs, define a logger using <a href=\"https://docs.ruby-lang.org/en/3.2/StringIO.html\" class=\"markdown-link\">StringIO</a> when registering the Cuprite driver. This is done by modifying the Capybara configuration in <code>spec/support/capybara.rb</code>:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># spec/support/capybara.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">Capybara</span><span class=\"mtk1\">.</span><span class=\"mtk5\">register_driver</span><span class=\"mtk1\"> </span><span class=\"mtk4\">:cuprite</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span><span class=\"mtk1\"> |app|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># === Capture console.log from the browser ===</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  logger </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">StringIO</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">Capybara</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Cuprite</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Driver</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    app,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">window_size:</span><span class=\"mtk1\"> [</span><span class=\"mtk4\">1440</span><span class=\"mtk1\">, </span><span class=\"mtk4\">900</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">timeout:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">5</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># other config ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># === Pass in the logger to capture console logs ===</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">logger:</span><span class=\"mtk1\"> logger</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">In this configuration, the <code>StringIO</code> logger will capture all browser console output during the test execution.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"step-2-use-the-logger-in-your-test\" style=\"position:relative;\"><a href=\"#step-2-use-the-logger-in-your-test\" aria-label=\"step 2 use the logger in your test permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Use the Logger in Your Test</h3>\n<p class=\"markdown-para\">Now that the Cuprite driver is set up to capture the logs, these can be accessed from tests. Here’s an example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># spec/features/some_spec.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">it </span><span class=\"mtk6\">&quot;Does something&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Visit the relevant page or trigger the action</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  visit some_path</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Perform some interaction that causes JavaScript to execute</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  click_button </span><span class=\"mtk6\">&quot;Some Action&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Capture browser console logs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  logs </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> page.</span><span class=\"mtk5\">driver</span><span class=\"mtk1\">.</span><span class=\"mtk5\">browser</span><span class=\"mtk1\">.</span><span class=\"mtk5\">options</span><span class=\"mtk1\">.</span><span class=\"mtk5\">logger</span><span class=\"mtk1\">.</span><span class=\"mtk5\">string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">puts</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;BROWSER LOGS CAPTURED FROM TEST: </span><span class=\"mtk7\">#{</span><span class=\"mtk1\">logs</span><span class=\"mtk7\">}</span><span class=\"mtk6\">&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Some test expectation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">URI</span><span class=\"mtk1\">.</span><span class=\"mtk5\">parse</span><span class=\"mtk1\">(page.</span><span class=\"mtk5\">current_url</span><span class=\"mtk1\">).</span><span class=\"mtk5\">request_uri</span><span class=\"mtk1\">).</span><span class=\"mtk5\">to</span><span class=\"mtk1\"> </span><span class=\"mtk5\">eql</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/account&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">In this test, after visiting the page and triggering any JavaScript behavior, you extract the captured logs from the <code>logger.string</code> attribute and print them out. This helps you debug JavaScript issues without slowing down the test execution.</p>\n<h3 class=\"markdown-sub-subtitle\" id=\"step-3-manage-the-log-output\" style=\"position:relative;\"><a href=\"#step-3-manage-the-log-output\" aria-label=\"step 3 manage the log output permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Manage the Log Output</h3>\n<p class=\"markdown-para\">The captured output is massive, as it includes not only the <code>console.log</code> statements you added but also a lot of internal browser output. To manage this, you can pipe the output into your clipboard or redirect it to a text file for easier inspection. Here’s how to do that on a Mac:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bin/rspec spec/features/some_spec.rb </span><span class=\"mtk7\">|</span><span class=\"mtk1\"> pbcopy</span></span></span></code></pre>\n<p class=\"markdown-para\">Once the output is in your clipboard or saved in a file, you can search for the specific logs you’re interested in. Look for occurrences of <code>Runtime.consoleAPICalled</code>. The captured log lines are json formatted like this:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"json\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;method&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;Runtime.consoleAPICalled&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;params&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;type&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;log&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">&quot;args&quot;</span><span class=\"mtk1\">: [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;type&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;string&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">&quot;value&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&quot;==== ROUTER NAVIGATE FINISHED:&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p class=\"markdown-para\">This is an example of a <code>console.log</code> statement captured during the test. You can now inspect these logs for clues as to what went wrong, such as whether your expected JavaScript code is actually running.</p>\n<p class=\"markdown-para\">Another option is to filter the log lines you're interested in directly in the test, for example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># spec/features/some_spec.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">it </span><span class=\"mtk6\">&quot;Does something&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Visit the relevant page or trigger the action</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  visit some_path</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Perform any interactions or assertions before capturing logs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  click_button </span><span class=\"mtk6\">&quot;Some Action&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Get full log output</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  logs </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> page.</span><span class=\"mtk5\">driver</span><span class=\"mtk1\">.</span><span class=\"mtk5\">browser</span><span class=\"mtk1\">.</span><span class=\"mtk5\">options</span><span class=\"mtk1\">.</span><span class=\"mtk5\">logger</span><span class=\"mtk1\">.</span><span class=\"mtk5\">string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Filter only the relevant lines</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  matching_logs </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> logs.</span><span class=\"mtk5\">lines</span><span class=\"mtk1\">.</span><span class=\"mtk9\">select</span><span class=\"mtk1\"> { |line| line.</span><span class=\"mtk5\">include?</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;=== ROUTER&quot;</span><span class=\"mtk1\">) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">puts</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;FILTERED BROWSER LOGS:&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">puts</span><span class=\"mtk1\"> matching_logs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Some test expectation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">URI</span><span class=\"mtk1\">.</span><span class=\"mtk5\">parse</span><span class=\"mtk1\">(page.</span><span class=\"mtk5\">current_url</span><span class=\"mtk1\">).</span><span class=\"mtk5\">request_uri</span><span class=\"mtk1\">).</span><span class=\"mtk5\">to</span><span class=\"mtk1\"> </span><span class=\"mtk5\">eql</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/account&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\"><strong class=\"markdown-strong\">IMPORTANT</strong></p>\n<p class=\"markdown-para\">When making changes to JavaScript files (or any front end assets), such as adding a <code>console.log(...)</code> for debugging, remember to run:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bin/rails assets:precompile</span></span></span></code></pre>\n<p class=\"markdown-para\"><em class=\"markdown-emphasis\">before</em> running the system tests.</p>\n<p class=\"markdown-para\">Otherwise, you may scratch your head wondering why the new log statements aren’t showing up when the tests run, even if logs are shown in development. This happens because in test mode, Rails uses the precompiled asset bundle. If you forget to recompile, it will continue to serve stale JavaScript from the previous build.</p>\n<h2 class=\"markdown-subtitle\" id=\"exploring-cuprite-source\" style=\"position:relative;\"><a href=\"#exploring-cuprite-source\" aria-label=\"exploring cuprite source permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploring Cuprite Source</h2>\n<p class=\"markdown-para\">Earlier I mentioned that it wasn't obvious from the Cuprite documentation how to do this. However, since the project is open source, a great way to dig deeper is to search the source and test suite. By searching for <code>console.log</code> within the Cuprite codebase, I found a <a href=\"https://github.com/rubycdp/cuprite/blob/503179f8f210c9d431f7f62bc20a68812cffd0e3/spec/features/driver_spec.rb#L53-L69\" class=\"markdown-link\">test case</a> that demonstrated how to capture console logs using a <code>StringIO</code> logger. This example in the Cuprite driver’s spec file confirmed that capturing browser logs during system tests was indeed possible:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"ruby\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># cuprite/spec/features/driver_spec.rb</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">context </span><span class=\"mtk6\">&quot;output redirection&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">let</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:logger</span><span class=\"mtk1\">) { </span><span class=\"mtk9 mtki\">StringIO</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">let</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:session</span><span class=\"mtk1\">) { </span><span class=\"mtk9 mtki\">Capybara</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Session</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:cuprite_with_logger</span><span class=\"mtk1\">, TestApp) }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  before </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">Capybara</span><span class=\"mtk1\">.</span><span class=\"mtk5\">register_driver</span><span class=\"mtk1\">(</span><span class=\"mtk4\">:cuprite_with_logger</span><span class=\"mtk1\">) </span><span class=\"mtk7\">do</span><span class=\"mtk1\"> |app|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9 mtki\">Capybara</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Cuprite</span><span class=\"mtk1\">::</span><span class=\"mtk9 mtki\">Driver</span><span class=\"mtk1\">.</span><span class=\"mtk7\">new</span><span class=\"mtk1\">(app, </span><span class=\"mtk4\">logger:</span><span class=\"mtk1\"> logger)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  after { session.</span><span class=\"mtk5\">driver</span><span class=\"mtk1\">.</span><span class=\"mtk5\">quit</span><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  it </span><span class=\"mtk6\">&quot;supports capturing console.log&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">do</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    session.</span><span class=\"mtk5\">visit</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/cuprite/console_log&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">expect</span><span class=\"mtk1\">(logger.</span><span class=\"mtk5\">string</span><span class=\"mtk1\">).</span><span class=\"mtk5\">to</span><span class=\"mtk1\"> </span><span class=\"mtk7\">include</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;Hello world&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">end</span></span></span></code></pre>\n<p class=\"markdown-para\">Lesson learned: If you're ever in doubt, remember that reading through the source code and tests can reveal a wealth of information!</p>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">Capturing browser console logs in Rails system tests with Capybara and Cuprite is a useful way to debug JavaScript timing issues without slowing down your tests. By modifying the driver configuration to include a <code>StringIO</code> logger, you can access all <code>console.log</code> output during test execution. Just be mindful that the captured output can be quite large, so redirecting it to a file or filtering within the test is recommended.</p>\n<p class=\"markdown-para\">This approach allows you to debug in real-world conditions, ensuring that the JS in your app behaves as expected under full-speed test runs.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk12 { color: #CFCFC2; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":5,"tableOfContents":"<ul>\n<li>\n<p><a href=\"#why-capture-browser-console-logs\">Why Capture Browser Console Logs?</a></p>\n</li>\n<li>\n<p><a href=\"#solution\">Solution</a></p>\n<ul>\n<li><a href=\"#step-1-modify-the-capybara-driver\">Step 1: Modify the Capybara Driver</a></li>\n<li><a href=\"#step-2-use-the-logger-in-your-test\">Step 2: Use the Logger in Your Test</a></li>\n<li><a href=\"#step-3-manage-the-log-output\">Step 3: Manage the Log Output</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#exploring-cuprite-source\">Exploring Cuprite Source</a></p>\n</li>\n<li>\n<p><a href=\"#conclusion\">Conclusion</a></p>\n</li>\n</ul>","frontmatter":{"title":"Capture Browser Console Logs in Rails System Tests with Capybara and Cuprite","date":"01 Jul 2025","description":"Learn how to capture browser console logs in Rails system tests using Capybara and Cuprite, and debug JavaScript issues without slowing down test execution.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#383848","images":{"fallback":{"src":"/static/9f729113ccd71eb9f31c22756f64dbc1/d730f/capture-browser-console-logs-elena-mozhvilo-AI17tJHgIJ8-unsplash.jpg","srcSet":"/static/9f729113ccd71eb9f31c22756f64dbc1/b834a/capture-browser-console-logs-elena-mozhvilo-AI17tJHgIJ8-unsplash.jpg 225w,\n/static/9f729113ccd71eb9f31c22756f64dbc1/2e19b/capture-browser-console-logs-elena-mozhvilo-AI17tJHgIJ8-unsplash.jpg 450w,\n/static/9f729113ccd71eb9f31c22756f64dbc1/d730f/capture-browser-console-logs-elena-mozhvilo-AI17tJHgIJ8-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/9f729113ccd71eb9f31c22756f64dbc1/71a10/capture-browser-console-logs-elena-mozhvilo-AI17tJHgIJ8-unsplash.webp 225w,\n/static/9f729113ccd71eb9f31c22756f64dbc1/55ac6/capture-browser-console-logs-elena-mozhvilo-AI17tJHgIJ8-unsplash.webp 450w,\n/static/9f729113ccd71eb9f31c22756f64dbc1/5acd1/capture-browser-console-logs-elena-mozhvilo-AI17tJHgIJ8-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":599}}}},"fields":{"slug":"/blog/capture-browser-console-logs-capybara-cuprite/"}},"relatedP":{"edges":[{"node":{"id":"31e8cce4-5682-5c17-8f35-c677650c8622","frontmatter":{"title":"Capybara Webdriver Element not Clickable Resolved","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/static/eca525b5ea56e9b81eb24b1a855a3cad/26528/capybara-jackson-simmer-Vqg809B-SrE-unsplash.jpg","srcSet":"/static/eca525b5ea56e9b81eb24b1a855a3cad/26528/capybara-jackson-simmer-Vqg809B-SrE-unsplash.jpg 300w,\n/static/eca525b5ea56e9b81eb24b1a855a3cad/43429/capybara-jackson-simmer-Vqg809B-SrE-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/eca525b5ea56e9b81eb24b1a855a3cad/5d6c3/capybara-jackson-simmer-Vqg809B-SrE-unsplash.webp 300w,\n/static/eca525b5ea56e9b81eb24b1a855a3cad/68dbc/capybara-jackson-simmer-Vqg809B-SrE-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/capybara-selenium-webdriver-element-not-clickable/"}}},{"node":{"id":"f782f0c1-28a3-59fe-932d-d741ee604f5b","frontmatter":{"title":"Debug Github Actions","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#081808","images":{"fallback":{"src":"/static/bc9cf9fe62735cdf137667e63704ac8c/26528/computer-bug.jpg","srcSet":"/static/bc9cf9fe62735cdf137667e63704ac8c/26528/computer-bug.jpg 300w,\n/static/bc9cf9fe62735cdf137667e63704ac8c/43429/computer-bug.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/bc9cf9fe62735cdf137667e63704ac8c/5d6c3/computer-bug.webp 300w,\n/static/bc9cf9fe62735cdf137667e63704ac8c/68dbc/computer-bug.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/debug-github-action/"}}},{"node":{"id":"c92d7f13-ff75-5632-be8c-e9b5ff992ddc","frontmatter":{"title":"Rails Feature Test Solved by Regex","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#487898","images":{"fallback":{"src":"/static/4b2924a3726801417360b49f81f7747b/26528/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.jpg","srcSet":"/static/4b2924a3726801417360b49f81f7747b/26528/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.jpg 300w,\n/static/4b2924a3726801417360b49f81f7747b/43429/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/4b2924a3726801417360b49f81f7747b/5d6c3/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.webp 300w,\n/static/4b2924a3726801417360b49f81f7747b/68dbc/rails-feature-test-regex-patrick-tomasso-QMDap1TAu0g-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/rails-feature-test-solved-regex/"}}}]}},"pageContext":{"slug":"/blog/capture-browser-console-logs-capybara-cuprite/","relatedPosts":["Debug Github Actions","Capybara Webdriver Element not Clickable Resolved","Rails Feature Test Solved by Regex"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}