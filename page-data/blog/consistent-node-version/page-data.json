{"componentChunkName":"component---src-templates-post-js","path":"/blog/consistent-node-version/","result":{"data":{"markdownRemark":{"html":"<p class=\"markdown-para\">In modern web development, Node.js is not limited to Node projects; it's widely used in frontend build tooling across various tech stacks like Rails and Java Spring. This creates a challenge for developers: which Node.js version to use? Some npm packages may only work with specific Node.js versions. Furthermore, developers often work on multiple projects, and each may require a different Node.js version. This post will explain how <a href=\"https://github.com/nvm-sh/nvm\" class=\"markdown-link\">nvm</a> (Node Version Manager) can be used to ensure a consistent Node.js environment across the project team, and make it easy to switch between different node versions when working on multiple projects.</p>\n<aside class=\"markdown-aside\">\nThis post assumes a basic understanding of what Node.js is and how it works. If you're new to it or need a refresher, check out the official <a class=\"markdown-link\" href=\"https://nodejs.org/en\">Node.js website</a> and <a class=\"markdown-link\" href=\"https://nodejs.org/en/docs\">documentation<a>.\n</aside>\n<h2 class=\"markdown-subtitle\" id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h2>\n<p class=\"markdown-para\">Before getting into the details of how to use nvm, let's review what the problem is. If a project was originally set up with a specific Node.js version, as time goes on, newer LTS or Current versions are released. The default approach for many developers might be to install the latest available version from the official <a href=\"https://nodejs.org/en\" class=\"markdown-link\">Node.js website</a>. However, this approach can lead to issues when new team members join the project. If a new developer installs the latest Node.js version without considering the project's original setup, it may result in errors while running <code>npm install</code> or, even worse, cause unexpected behavior in the application if it relies on assumptions made for an older Node.js version.</p>\n<p class=\"markdown-para\">Moreover, when switching to work on a different project, which might require a specific Node.js version, the developer would have to uninstall the current version and manually install the required version from the list of previous <a href=\"https://nodejs.org/en/download/releases\" class=\"markdown-link\">Node.js releases</a>. This process becomes tedious, especially for developers who frequently switch between different projects. As such, a version management solution like nvm (Node Version Manager) becomes crucial to ensure consistency and avoid compatibility issues across various projects.</p>\n<h2 class=\"markdown-subtitle\" id=\"install-nvm\" style=\"position:relative;\"><a href=\"#install-nvm\" aria-label=\"install nvm permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install nvm</h2>\n<p class=\"markdown-para\">Start by going to <a href=\"https://github.com/nvm-sh/nvm\" class=\"markdown-link\">nvm on Github</a> and following the instructions to install it. At the time of this writing, the install command is:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh </span><span class=\"mtk7\">|</span><span class=\"mtk1\"> bash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># OR</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh </span><span class=\"mtk7\">|</span><span class=\"mtk1\"> bash</span></span></span></code></pre>\n<p class=\"markdown-para\">The installation command will modify your profile by detecting which of <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>~/.zshrc</code>, or <code>~/.zprofile</code> is in use. Therefore to activate nvm after initial installation, either close the terminal application and start it again, or reload the profile. For example, if your profile is in <code>~/.zshrc</code> the command to reload is:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">source</span><span class=\"mtk1\"> </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/.zshrc</span></span></span></code></pre>\n<aside class=\"markdown-aside\">\nIf you're particularly safety conscious, an alternative approach to installing nvm is to download the nvm source directly from the latest <a class=\"markdown-link\" href=\"https://github.com/nvm-sh/nvm/releases\">release on GitHub</a> and review the \"install.sh\" script to ensure its integrity. Then, instead of piping the script through bash from raw.githubusercontent, you can run the script directly in your terminal.\n</aside>\n<p class=\"markdown-para\">If you're a Windows user, see these <a href=\"https://github.com/nvm-sh/nvm#important-notes\" class=\"markdown-link\">important notes</a> about nvm support for Windows.</p>\n<p class=\"markdown-para\">At this point, you should be able to use nvm to list currently installed Node.js versions:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nvm ls</span></span></span></code></pre>\n<p class=\"markdown-para\">Install a specific version:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nvm install 18.17.0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># The `nvm install` command also switches you to that Node.js version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">node --version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># v18.17.0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># It also installs npm</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">npm --version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 9.6.7</span></span></span></code></pre>\n<p class=\"markdown-para\">Switch to a specific version, this will work assuming the specified version was previously installed:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nvm use 16.20.1</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"use-nvmrc-file\" style=\"position:relative;\"><a href=\"#use-nvmrc-file\" aria-label=\"use nvmrc file permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use .nvmrc file</h2>\n<p class=\"markdown-para\">In the previous section, we saw how <code>nvm install x.y.z</code> and <code>nvm use x.y.z</code> can be used to install and switch to specific node versions. Another feature that nvm provides is the ability to install and use a node version without having to type it in the command line. To make use of this, create a file named <code>.nvmrc</code> in the root of your project:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># in project root</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">touch .nvmrc</span></span></span></code></pre>\n<p class=\"markdown-para\">Edit the file so that it has a single line with the Node.js version that should be used for this project, for example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">echo</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;18.17.0&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> .nvmrc</span></span></span></code></pre>\n<p class=\"markdown-para\">Now in this directory, you can type in:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Will install Node v18.17.0 from .nvmrc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nvm install</span></span></span></code></pre>\n<p class=\"markdown-para\">If the node version specified in <code>.nvmrc</code> is already installed, then this will work:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Will switch to Node v18.17.0 from .nvmrc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nvm use</span></span></span></code></pre>\n<p class=\"markdown-para\">The <code>.nvmrc</code> file can be committed to your project git repo. Then you can update the setup instructions in the project <code>README.md</code> to include the instructions to install nvm, then run <code>nvm install</code> and/or <code>nvm use</code>. This ensures that any developer working on this project will be using the same Node.js version. Furthermore, since nvm supports having multiple node versions installed at the same time, developers can easily switch between projects that have <code>.nvmrc</code> files in their roots, and use the nvm commands to quickly get the right Node.js version setup.</p>\n<h2 class=\"markdown-subtitle\" id=\"add-shell-integration\" style=\"position:relative;\"><a href=\"#add-shell-integration\" aria-label=\"add shell integration permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add shell integration</h2>\n<p class=\"markdown-para\">One slight bit of friction with the setup so far is that if you run <code>nvm use</code> in a directory with a <code>.nvmrc</code> file that specifies a Node.js version that isn't already installed, it will result in an error. For example, suppose the <code>.nvmrc</code> file specifies Node.js v20.5.0, which isn't currently installed:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Check what Node.js version this project requires</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">cd</span><span class=\"mtk1\"> /path/to/some_project</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cat .nvmrc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 20.5.0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Try to use it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nvm use</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Found &#39;/path/to/some_project/.nvmrc&#39; with version &lt;20.5.0&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># N/A: version &quot;v20.5.0&quot; is not yet installed.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># You need to run `nvm install` to install and use the node version specified in `.nvmrc`.</span></span></span></code></pre>\n<p class=\"markdown-para\">It would be nice if there was some automation that could handle this - i.e. check if the Node.js version specified in <code>.nvmrc</code> is already installed, if yes, use it, otherwise, install and then use it. Fortunately, nvm provides this as well via <a href=\"https://github.com/nvm-sh/nvm#deeper-shell-integration\" class=\"markdown-link\">shell integration</a>. The idea is you can add a script to your profile that will check for a <code>.nvmrc</code> file in any directory you <code>cd</code> to, then either install or use that Node.js version automatically.</p>\n<p class=\"markdown-para\">At the time of this writing, automatic shell integration is supported for the <a href=\"https://github.com/nvm-sh/nvm#bash\" class=\"markdown-link\">bash</a>, <a href=\"https://github.com/nvm-sh/nvm#zsh\" class=\"markdown-link\">zsh</a>, and <a href=\"https://github.com/nvm-sh/nvm#fish\" class=\"markdown-link\">fish</a> shells. I use zsh with my profile in <code>~/.zshrc</code>. Here are the lines I added to my profile to support automatic Node version installation and switching. I asked ChatGPT to add explanatory comments:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># ~/.zshrc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># My profile things...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># This section was added by the nvm install script</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># and initializes nvm:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">export</span><span class=\"mtk1\"> NVM_DIR=</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$HOME</span><span class=\"mtk6\">/.nvm&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[ </span><span class=\"mtk7\">-s</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$NVM_DIR</span><span class=\"mtk6\">/nvm.sh&quot;</span><span class=\"mtk1\"> ] </span><span class=\"mtk7\">&amp;&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">\\.</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$NVM_DIR</span><span class=\"mtk6\">/nvm.sh&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[ </span><span class=\"mtk7\">-s</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$NVM_DIR</span><span class=\"mtk6\">/bash_completion&quot;</span><span class=\"mtk1\"> ] </span><span class=\"mtk7\">&amp;&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">\\.</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$NVM_DIR</span><span class=\"mtk6\">/bash_completion&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Add this section for shell integration AFTER nvm initialization:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Add functions to be executed when a hook is triggered.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">autoload -U add-zsh-hook</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Handle automatic Node.js version switching based on .nvmrc files.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">load-nvmrc</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Get the path of the .nvmrc file in the current directory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">local</span><span class=\"mtk1\"> nvmrc_path=</span><span class=\"mtk6\">&quot;$(nvm_find_nvmrc)&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># Check if an .nvmrc file was found in the current directory.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> [ </span><span class=\"mtk7\">-n</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$nvmrc_path</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\"> ]</span><span class=\"mtk7\">;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">then</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Get the Node.js version specified in the .nvmrc file.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">local</span><span class=\"mtk1\"> nvmrc_node_version=</span><span class=\"mtk6\">$(nvm version &quot;$(cat &quot;</span><span class=\"mtk1\">${nvmrc_path}</span><span class=\"mtk6\">&quot;)&quot;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Check if the specified Node.js version is &quot;N/A&quot; (not installed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> [ </span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$nvmrc_node_version</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;N/A&quot;</span><span class=\"mtk1\"> ]</span><span class=\"mtk7\">;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">then</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># If the specified version is not installed, use nvm to install it.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      nvm install</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Check if the current Node.js version differs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># from the version specified in .nvmrc.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">elif</span><span class=\"mtk1\"> [ </span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">$nvmrc_node_version</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">!=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;$(nvm version)&quot;</span><span class=\"mtk1\"> ]</span><span class=\"mtk7\">;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">then</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\"># If the versions differ, use nvm to switch to the specified version.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      nvm use</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">fi</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># If there is no .nvmrc file in the current directory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># but one is found in the parent directory,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># and the current Node.js version is different from the default version,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\"># switch back to the default version.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">elif</span><span class=\"mtk1\"> [ </span><span class=\"mtk7\">-n</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;$(PWD=</span><span class=\"mtk1\">$OLDPWD</span><span class=\"mtk6\"> nvm_find_nvmrc)&quot;</span><span class=\"mtk1\"> ] </span><span class=\"mtk7\">&amp;&amp;</span><span class=\"mtk1\"> [ </span><span class=\"mtk6\">&quot;$(nvm version)&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">!=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;$(nvm version default)&quot;</span><span class=\"mtk1\"> ]</span><span class=\"mtk7\">;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">then</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">echo</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;Reverting to nvm default version&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    nvm use default</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">fi</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Add the load-nvmrc function to the &quot;chpwd&quot; hook,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># which is triggered whenever the current working directory changes.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">add-zsh-hook chpwd load-nvmrc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Call the load-nvmrc function initially to set the</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Node.js version based on the .nvmrc file in the current directory.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">load-nvmrc</span></span></span></code></pre>\n<p class=\"markdown-para\">With nvm shell integration in place, being on the right Node.js version is even easier, as you don't need to remember to do anything, your shell will handle all the work for you. For example, suppose you frequently toggle between two projects, one of which uses Node.js LTS and another which uses Current (18.17.0 and 20.5.0 respectively at the time of this writing), with a directory structure similar to the following:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── current_project</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── .nvmrc # contains 20.5.0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   └── app</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│       └── index.js</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└── lts_project</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ├── .nvmrc # contains 18.17.0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    └── app</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        └── index.js</span></span></code></pre>\n<p class=\"markdown-para\">Now you want to work on <code>current_project</code> but don't have that Node.js version installed. When you <code>cd</code> into the project directory, the code you added to your profile for shell integration will detect this and automatically install the correct version as follows:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">cd</span><span class=\"mtk1\"> /path/to/current_project</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Found &#39;/path/to/current_project/.nvmrc&#39; with version &lt;20.5.0&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Downloading and installing node v20.5.0...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Downloading https://nodejs.org/dist/v20.5.0/node-v20.5.0-darwin-arm64.tar.xz...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">######################################################################################################################################################################################################### 100.0%</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Computing checksum with shasum -a 256</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Checksums matched!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Now using node v20.5.0 (npm v9.8.0)</span></span></span></code></pre>\n<p class=\"markdown-para\">Now if you need to switch to <code>lts_project</code> and already have that Node.js version installed, the shell integration will automatically switch to that, without attempting to install it again:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">cd</span><span class=\"mtk1\"> /path/to/lts_project</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Found &#39;/path/to/lts_project/.nvmrc&#39; with version &lt;18.17.0&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Now using node v18.17.0 (npm v9.6.7)</span></span></span></code></pre>\n<p class=\"markdown-para\">Switching to a directory that doesn't have a <code>.nvmrc</code> file will make the shell integration code revert to the default Node.js version, for example:</p>\n<pre class=\"grvsc-container gatsby-highlight monokai\" data-language=\"bash\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">cd</span><span class=\"mtk1\"> </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/Documents</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Reverting to nvm default version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Now using node v18.16.1 (npm v9.5.1)</span></span></span></code></pre>\n<h2 class=\"markdown-subtitle\" id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"markdown-header-link before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p class=\"markdown-para\">This post has covered the benefits of using <a href=\"https://github.com/nvm-sh/nvm\" class=\"markdown-link\">nvm</a> for web development. With the ability to easily manage different Node.js versions, nvm ensures a consistent environment across projects and simplifies the process of switching between versions. The use of the <code>.nvmrc</code> file supports specifying required Node.js versions per project, streamlining the setup for developers. Additionally, nvm's shell integration automates the installation and usage of specific Node.js versions, further enhancing productivity.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","timeToRead":7,"tableOfContents":"<ul>\n<li><a href=\"#the-problem\">The Problem</a></li>\n<li><a href=\"#install-nvm\">Install nvm</a></li>\n<li><a href=\"#use-nvmrc-file\">Use .nvmrc file</a></li>\n<li><a href=\"#add-shell-integration\">Add shell integration</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Maintain Node.js Version Consistency","date":"01 Dec 2023","description":"Explore the benefits of using nvm to maintain consistent Node.js versions across team members and effortlessly switch between projects with different Node.js requirements.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f88898","images":{"fallback":{"src":"/static/773293fda078202f618218e41633950c/d730f/consistent-node-version-jason-leung-FAsrFrWSIqA-unsplash.jpg","srcSet":"/static/773293fda078202f618218e41633950c/b834a/consistent-node-version-jason-leung-FAsrFrWSIqA-unsplash.jpg 225w,\n/static/773293fda078202f618218e41633950c/21c52/consistent-node-version-jason-leung-FAsrFrWSIqA-unsplash.jpg 450w,\n/static/773293fda078202f618218e41633950c/d730f/consistent-node-version-jason-leung-FAsrFrWSIqA-unsplash.jpg 900w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/773293fda078202f618218e41633950c/71a10/consistent-node-version-jason-leung-FAsrFrWSIqA-unsplash.webp 225w,\n/static/773293fda078202f618218e41633950c/901f1/consistent-node-version-jason-leung-FAsrFrWSIqA-unsplash.webp 450w,\n/static/773293fda078202f618218e41633950c/5acd1/consistent-node-version-jason-leung-FAsrFrWSIqA-unsplash.webp 900w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":599}}}},"fields":{"slug":"/blog/consistent-node-version/"}},"relatedP":{"edges":[{"node":{"id":"83dd782c-aa3e-591e-84a7-c6aeaa087bb8","frontmatter":{"title":"Build and Publish a Presentation with RevealJS and Github","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#580818","images":{"fallback":{"src":"/static/c2cb416522ba1d8d60f3013c685215ab/26528/presentation.jpg","srcSet":"/static/c2cb416522ba1d8d60f3013c685215ab/26528/presentation.jpg 300w,\n/static/c2cb416522ba1d8d60f3013c685215ab/43429/presentation.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/c2cb416522ba1d8d60f3013c685215ab/5d6c3/presentation.webp 300w,\n/static/c2cb416522ba1d8d60f3013c685215ab/68dbc/presentation.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/build-and-publish-presentation-with-html-and-css/"}}},{"node":{"id":"2ff69133-3492-5f7d-b9cf-3ae890b29690","frontmatter":{"title":"View Localhost on Your Phone","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#080808","images":{"fallback":{"src":"/static/199d623bb3bee484b020fd95b04502d7/26528/phone-localhost-rodion-kutsaev-0VGG7cqTwCo-unsplash.jpg","srcSet":"/static/199d623bb3bee484b020fd95b04502d7/26528/phone-localhost-rodion-kutsaev-0VGG7cqTwCo-unsplash.jpg 300w,\n/static/199d623bb3bee484b020fd95b04502d7/43429/phone-localhost-rodion-kutsaev-0VGG7cqTwCo-unsplash.jpg 600w","sizes":"300px"},"sources":[{"srcSet":"/static/199d623bb3bee484b020fd95b04502d7/5d6c3/phone-localhost-rodion-kutsaev-0VGG7cqTwCo-unsplash.webp 300w,\n/static/199d623bb3bee484b020fd95b04502d7/68dbc/phone-localhost-rodion-kutsaev-0VGG7cqTwCo-unsplash.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/phone-localhost/"}}},{"node":{"id":"bc6fe391-9493-5080-aa75-fb4c1cf2f4f1","frontmatter":{"title":"TDD by Example","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#181818","images":{"fallback":{"src":"/static/3977c358105da928e0f7cc22eb4addca/ad250/tdd-by-example.png","srcSet":"/static/3977c358105da928e0f7cc22eb4addca/ad250/tdd-by-example.png 300w,\n/static/3977c358105da928e0f7cc22eb4addca/b64d1/tdd-by-example.png 600w","sizes":"300px"},"sources":[{"srcSet":"/static/3977c358105da928e0f7cc22eb4addca/5d6c3/tdd-by-example.webp 300w,\n/static/3977c358105da928e0f7cc22eb4addca/68dbc/tdd-by-example.webp 600w","type":"image/webp","sizes":"300px"}]},"width":300,"height":170}}}},"fields":{"slug":"/blog/tdd-by-example/"}}}]}},"pageContext":{"slug":"/blog/consistent-node-version/","relatedPosts":["Build and Publish a Presentation with RevealJS and Github","View Localhost on Your Phone","TDD by Example"]}},"staticQueryHashes":["163244226"],"slicesMap":{}}